{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  SVG_NS\n} = require(\"../helpers/namespaces\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\n\nconst ElementImpl = require(\"./Element-impl\").implementation;\n\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nconst HTMLOrSVGElementImpl = require(\"./HTMLOrSVGElement-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._initHTMLOrSVGElement();\n\n    this._initElementCSSInlineStyle();\n\n    this._initGlobalEvents();\n  } // Keep in sync with HTMLElement. https://github.com/jsdom/jsdom/issues/2599\n\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl(this._globalObject, [], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n\n}\n\nSVGElementImpl.attributeRegistry = new Map();\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLOrSVGElementImpl.prototype);\nexports.implementation = SVGElementImpl;","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement-impl.js"],"names":["domSymbolTree","require","SVG_NS","mixin","SVGAnimatedString","ElementImpl","implementation","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLOrSVGElementImpl","SVGElementImpl","constructor","globalObject","args","privateData","_initHTMLOrSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","_attrModified","name","value","oldValue","_settingCssText","_style","cssText","startsWith","_globalEventChanged","substring","apply","arguments","className","createImpl","_globalObject","element","attribute","ownerSVGElement","e","parent","namespaceURI","localName","viewportElement","attributeRegistry","Map","prototype","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,gBAAD,CAAP,CAA0BK,cAA9C;;AACA,MAAMC,yBAAyB,GAAGN,OAAO,CAAC,8BAAD,CAAP,CAAwCK,cAA1E;;AACA,MAAME,uBAAuB,GAAGP,OAAO,CAAC,4BAAD,CAAP,CAAsCK,cAAtE;;AACA,MAAMG,oBAAoB,GAAGR,OAAO,CAAC,yBAAD,CAAP,CAAmCK,cAAhE;;AAEA,MAAMI,cAAN,SAA6BL,WAA7B,CAAyC;AACvCM,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC3C,UAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;;AACA,SAAKC,qBAAL;;AACA,SAAKC,0BAAL;;AACA,SAAKC,iBAAL;AACD,GANsC,CAQvC;;;AACAC,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AACnC,QAAIF,IAAI,KAAK,OAAT,IAAoBC,KAAK,KAAKC,QAA9B,IAA0C,CAAC,KAAKC,eAApD,EAAqE;AACnE,WAAKA,eAAL,GAAuB,IAAvB;AACA,WAAKC,MAAL,CAAYC,OAAZ,GAAsBJ,KAAtB;AACA,WAAKE,eAAL,GAAuB,KAAvB;AACD,KAJD,MAIO,IAAIH,IAAI,CAACM,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AAChC,WAAKC,mBAAL,CAAyBP,IAAI,CAACQ,SAAL,CAAe,CAAf,CAAzB;AACD;;AAED,UAAMT,aAAN,CAAoBU,KAApB,CAA0B,IAA1B,EAAgCC,SAAhC;AACD;;AAEY,MAATC,SAAS,GAAG;AACd,WAAO1B,iBAAiB,CAAC2B,UAAlB,CAA6B,KAAKC,aAAlC,EAAiD,EAAjD,EAAqD;AAC1DC,MAAAA,OAAO,EAAE,IADiD;AAE1DC,MAAAA,SAAS,EAAE;AAF+C,KAArD,CAAP;AAID;;AAEkB,MAAfC,eAAe,GAAG;AACpB,QAAIC,CAAC,GAAGpC,aAAa,CAACqC,MAAd,CAAqB,IAArB,CAAR;;AACA,WAAOD,CAAC,IAAIA,CAAC,CAACE,YAAF,KAAmBpC,MAA/B,EAAuC;AACrC,UAAIkC,CAAC,CAACG,SAAF,KAAgB,KAApB,EAA2B;AACzB,eAAOH,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAGpC,aAAa,CAACqC,MAAd,CAAqBD,CAArB,CAAJ;AACD;;AAED,WAAO,IAAP;AACD;;AAEkB,MAAfI,eAAe,GAAG;AACpB;AACA,WAAO,KAAKL,eAAZ;AACD;;AA3CsC;;AA8CzCzB,cAAc,CAAC+B,iBAAf,GAAmC,IAAIC,GAAJ,EAAnC;AAEAvC,KAAK,CAACO,cAAc,CAACiC,SAAhB,EAA2BpC,yBAAyB,CAACoC,SAArD,CAAL;AACAxC,KAAK,CAACO,cAAc,CAACiC,SAAhB,EAA2BnC,uBAAuB,CAACmC,SAAnD,CAAL;AACAxC,KAAK,CAACO,cAAc,CAACiC,SAAhB,EAA2BlC,oBAAoB,CAACkC,SAAhD,CAAL;AAEAC,OAAO,CAACtC,cAAR,GAAyBI,cAAzB","sourcesContent":["\"use strict\";\r\n\r\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\r\nconst { SVG_NS } = require(\"../helpers/namespaces\");\r\nconst { mixin } = require(\"../../utils\");\r\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\r\nconst ElementImpl = require(\"./Element-impl\").implementation;\r\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\r\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\r\nconst HTMLOrSVGElementImpl = require(\"./HTMLOrSVGElement-impl\").implementation;\r\n\r\nclass SVGElementImpl extends ElementImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n    this._initHTMLOrSVGElement();\r\n    this._initElementCSSInlineStyle();\r\n    this._initGlobalEvents();\r\n  }\r\n\r\n  // Keep in sync with HTMLElement. https://github.com/jsdom/jsdom/issues/2599\r\n  _attrModified(name, value, oldValue) {\r\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\r\n      this._settingCssText = true;\r\n      this._style.cssText = value;\r\n      this._settingCssText = false;\r\n    } else if (name.startsWith(\"on\")) {\r\n      this._globalEventChanged(name.substring(2));\r\n    }\r\n\r\n    super._attrModified.apply(this, arguments);\r\n  }\r\n\r\n  get className() {\r\n    return SVGAnimatedString.createImpl(this._globalObject, [], {\r\n      element: this,\r\n      attribute: \"class\"\r\n    });\r\n  }\r\n\r\n  get ownerSVGElement() {\r\n    let e = domSymbolTree.parent(this);\r\n    while (e && e.namespaceURI === SVG_NS) {\r\n      if (e.localName === \"svg\") {\r\n        return e;\r\n      }\r\n      e = domSymbolTree.parent(e);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  get viewportElement() {\r\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\r\n    return this.ownerSVGElement;\r\n  }\r\n}\r\n\r\nSVGElementImpl.attributeRegistry = new Map();\r\n\r\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\r\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\r\nmixin(SVGElementImpl.prototype, HTMLOrSVGElementImpl.prototype);\r\n\r\nexports.implementation = SVGElementImpl;\r\n"]},"metadata":{},"sourceType":"script"}