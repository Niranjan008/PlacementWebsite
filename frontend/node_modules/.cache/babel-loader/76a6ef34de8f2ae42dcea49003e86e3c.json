{"ast":null,"code":"\"use strict\";\n\nconst iconvLite = require(\"iconv-lite\");\n\nconst supportedNames = require(\"./supported-names.json\");\n\nconst labelsToNames = require(\"./labels-to-names.json\");\n\nconst supportedNamesSet = new Set(supportedNames); // https://encoding.spec.whatwg.org/#concept-encoding-get\n\nexports.labelToName = label => {\n  label = String(label).trim().toLowerCase();\n  return labelsToNames[label] || null;\n}; // https://encoding.spec.whatwg.org/#decode\n\n\nexports.decode = (buffer, fallbackEncodingName) => {\n  let encoding = fallbackEncodingName;\n\n  if (!exports.isSupported(encoding)) {\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\n  }\n\n  const bomEncoding = exports.getBOMEncoding(buffer);\n\n  if (bomEncoding !== null) {\n    encoding = bomEncoding;\n  } // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does\n\n\n  return iconvLite.decode(buffer, encoding);\n}; // https://github.com/whatwg/html/issues/1910#issuecomment-254017369\n\n\nexports.getBOMEncoding = buffer => {\n  if (buffer[0] === 0xFE && buffer[1] === 0xFF) {\n    return \"UTF-16BE\";\n  } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {\n    return \"UTF-16LE\";\n  } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    return \"UTF-8\";\n  }\n\n  return null;\n};\n\nexports.isSupported = name => {\n  return supportedNamesSet.has(String(name));\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/whatwg-encoding/lib/whatwg-encoding.js"],"names":["iconvLite","require","supportedNames","labelsToNames","supportedNamesSet","Set","exports","labelToName","label","String","trim","toLowerCase","decode","buffer","fallbackEncodingName","encoding","isSupported","RangeError","bomEncoding","getBOMEncoding","name","has"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,wBAAD,CAA9B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,wBAAD,CAA7B;;AAEA,MAAMG,iBAAiB,GAAG,IAAIC,GAAJ,CAAQH,cAAR,CAA1B,C,CAEA;;AACAI,OAAO,CAACC,WAAR,GAAsBC,KAAK,IAAI;AAC7BA,EAAAA,KAAK,GAAGC,MAAM,CAACD,KAAD,CAAN,CAAcE,IAAd,GAAqBC,WAArB,EAAR;AAEA,SAAOR,aAAa,CAACK,KAAD,CAAb,IAAwB,IAA/B;AACD,CAJD,C,CAMA;;;AACAF,OAAO,CAACM,MAAR,GAAiB,CAACC,MAAD,EAASC,oBAAT,KAAkC;AACjD,MAAIC,QAAQ,GAAGD,oBAAf;;AACA,MAAI,CAACR,OAAO,CAACU,WAAR,CAAoBD,QAApB,CAAL,EAAoC;AAClC,UAAM,IAAIE,UAAJ,CAAgB,IAAGF,QAAS,oCAA5B,CAAN;AACD;;AAED,QAAMG,WAAW,GAAGZ,OAAO,CAACa,cAAR,CAAuBN,MAAvB,CAApB;;AACA,MAAIK,WAAW,KAAK,IAApB,EAA0B;AACxBH,IAAAA,QAAQ,GAAGG,WAAX;AACD,GATgD,CAWjD;;;AAEA,SAAOlB,SAAS,CAACY,MAAV,CAAiBC,MAAjB,EAAyBE,QAAzB,CAAP;AACD,CAdD,C,CAgBA;;;AACAT,OAAO,CAACa,cAAR,GAAyBN,MAAM,IAAI;AACjC,MAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,IAAd,IAAsBA,MAAM,CAAC,CAAD,CAAN,KAAc,IAAxC,EAA8C;AAC5C,WAAO,UAAP;AACD,GAFD,MAEO,IAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,IAAd,IAAsBA,MAAM,CAAC,CAAD,CAAN,KAAc,IAAxC,EAA8C;AACnD,WAAO,UAAP;AACD,GAFM,MAEA,IAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,IAAd,IAAsBA,MAAM,CAAC,CAAD,CAAN,KAAc,IAApC,IAA4CA,MAAM,CAAC,CAAD,CAAN,KAAc,IAA9D,EAAoE;AACzE,WAAO,OAAP;AACD;;AAED,SAAO,IAAP;AACD,CAVD;;AAYAP,OAAO,CAACU,WAAR,GAAsBI,IAAI,IAAI;AAC5B,SAAOhB,iBAAiB,CAACiB,GAAlB,CAAsBZ,MAAM,CAACW,IAAD,CAA5B,CAAP;AACD,CAFD","sourcesContent":["\"use strict\";\r\nconst iconvLite = require(\"iconv-lite\");\r\nconst supportedNames = require(\"./supported-names.json\");\r\nconst labelsToNames = require(\"./labels-to-names.json\");\r\n\r\nconst supportedNamesSet = new Set(supportedNames);\r\n\r\n// https://encoding.spec.whatwg.org/#concept-encoding-get\r\nexports.labelToName = label => {\r\n  label = String(label).trim().toLowerCase();\r\n\r\n  return labelsToNames[label] || null;\r\n};\r\n\r\n// https://encoding.spec.whatwg.org/#decode\r\nexports.decode = (buffer, fallbackEncodingName) => {\r\n  let encoding = fallbackEncodingName;\r\n  if (!exports.isSupported(encoding)) {\r\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\r\n  }\r\n\r\n  const bomEncoding = exports.getBOMEncoding(buffer);\r\n  if (bomEncoding !== null) {\r\n    encoding = bomEncoding;\r\n  }\r\n\r\n  // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does\r\n\r\n  return iconvLite.decode(buffer, encoding);\r\n};\r\n\r\n// https://github.com/whatwg/html/issues/1910#issuecomment-254017369\r\nexports.getBOMEncoding = buffer => {\r\n  if (buffer[0] === 0xFE && buffer[1] === 0xFF) {\r\n    return \"UTF-16BE\";\r\n  } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {\r\n    return \"UTF-16LE\";\r\n  } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\r\n    return \"UTF-8\";\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexports.isSupported = name => {\r\n  return supportedNamesSet.has(String(name));\r\n};\r\n"]},"metadata":{},"sourceType":"script"}