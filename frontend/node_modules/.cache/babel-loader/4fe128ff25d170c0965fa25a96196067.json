{"ast":null,"code":"'use strict';\n\nclass CMapReaderFactory {\n  constructor(param) {\n    this.baseUrl = param.baseUrl;\n    this.isCompressed = param.isCompressed;\n  }\n\n  fetch(param) {\n    var name = param.name;\n\n    if (!name) {\n      return Promise.reject(new Error('CMap name must be specified.'));\n    }\n\n    return new Promise((resolve, reject) => {\n      let url = this.baseUrl + name + (this.isCompressed ? '.bcmap' : '');\n\n      let fs = require('fs');\n\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error('Unable to load ' + (this.isCompressed ? 'binary ' : '') + 'CMap at: ' + url));\n          return;\n        }\n\n        resolve({\n          cMapData: new Uint8Array(data),\n          compressionType: this.isCompressed ? 1 : 0\n        });\n      });\n    });\n  }\n\n}\n\n;\nmodule.exports = CMapReaderFactory;","map":{"version":3,"sources":["C:/Users/NIRANJAN/pweb/frontend/node_modules/pdf-parser/lib/cmap-reader-factory.js"],"names":["CMapReaderFactory","constructor","param","baseUrl","isCompressed","fetch","name","Promise","reject","Error","resolve","url","fs","require","readFile","error","data","cMapData","Uint8Array","compressionType","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,OAAL,GAAeD,KAAK,CAACC,OAArB;AACA,SAAKC,YAAL,GAAoBF,KAAK,CAACE,YAA1B;AACH;;AAEDC,EAAAA,KAAK,CAACH,KAAD,EAAQ;AACT,QAAII,IAAI,GAAGJ,KAAK,CAACI,IAAjB;;AACA,QAAI,CAACA,IAAL,EAAW;AACP,aAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,8BAAV,CAAf,CAAP;AACH;;AACD,WAAO,IAAIF,OAAJ,CAAY,CAACG,OAAD,EAAUF,MAAV,KAAqB;AACpC,UAAIG,GAAG,GAAG,KAAKR,OAAL,GAAeG,IAAf,IAAuB,KAAKF,YAAL,GAAoB,QAApB,GAA+B,EAAtD,CAAV;;AAEA,UAAIQ,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACAD,MAAAA,EAAE,CAACE,QAAH,CAAYH,GAAZ,EAAiB,CAACI,KAAD,EAAQC,IAAR,KAAiB;AAC9B,YAAID,KAAK,IAAI,CAACC,IAAd,EAAoB;AAChBR,UAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,qBACZ,KAAKL,YAAL,GAAoB,SAApB,GAAgC,EADpB,IAEb,WAFa,GAECO,GAFX,CAAD,CAAN;AAGA;AACH;;AACDD,QAAAA,OAAO,CAAC;AACJO,UAAAA,QAAQ,EAAE,IAAIC,UAAJ,CAAeF,IAAf,CADN;AAEJG,UAAAA,eAAe,EAAE,KAAKf,YAAL,GAAoB,CAApB,GAAwB;AAFrC,SAAD,CAAP;AAIH,OAXD;AAYH,KAhBM,CAAP;AAiBH;;AA5BmB;;AA6BvB;AAEDgB,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["'use strict';\r\n\r\nclass CMapReaderFactory {\r\n    constructor(param) {\r\n        this.baseUrl = param.baseUrl;\r\n        this.isCompressed = param.isCompressed;\r\n    }\r\n\r\n    fetch(param) {\r\n        var name = param.name;\r\n        if (!name) {\r\n            return Promise.reject(new Error('CMap name must be specified.'));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let url = this.baseUrl + name + (this.isCompressed ? '.bcmap' : '');\r\n\r\n            let fs = require('fs');\r\n            fs.readFile(url, (error, data) => {\r\n                if (error || !data) {\r\n                    reject(new Error('Unable to load ' +\r\n                        (this.isCompressed ? 'binary ' : '') +\r\n                        'CMap at: ' + url));\r\n                    return;\r\n                }\r\n                resolve({\r\n                    cMapData: new Uint8Array(data),\r\n                    compressionType: this.isCompressed ? 1 : 0,\r\n                });\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = CMapReaderFactory;"]},"metadata":{},"sourceType":"script"}