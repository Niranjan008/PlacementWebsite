{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  formOwner,\n  isListed,\n  isSubmittable,\n  isSubmitButton\n} = require(\"../helpers/form-controls\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nconst methods = new Set([\"get\", \"post\", \"dialog\"]);\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  _getElementNodes() {\n    return domSymbolTree.treeToArray(this.getRootNode({}), {\n      filter: node => {\n        if (!isListed(node) || node._localName === \"input\" && node.type === \"image\") {\n          return false;\n        }\n\n        return formOwner(node) === this;\n      }\n    });\n  } // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements\n\n\n  get elements() {\n    // TODO: Return a HTMLFormControlsCollection\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this.getRootNode({}),\n      query: () => this._getElementNodes()\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.submit();\n  }\n\n  submit() {\n    if (!fireAnEvent(\"submit\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  requestSubmit(submitter = undefined) {\n    if (submitter !== undefined) {\n      if (!isSubmitButton(submitter)) {\n        throw new TypeError(\"The specified element is not a submit button\");\n      }\n\n      if (submitter.form !== this) {\n        throw DOMException.create(this._globalObject, [\"The specified element is not owned by this form element\", \"NotFoundError\"]);\n      }\n    }\n\n    if (!fireAnEvent(\"submit\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.requestSubmit\", this._ownerDocument._defaultView);\n  }\n\n  _doReset() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    if (!fireAnEvent(\"reset\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttributeNS(null, \"method\");\n\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttributeNS(null, \"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttributeNS(null, \"enctype\");\n\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttributeNS(null, \"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttributeNS(null, \"action\");\n\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    const urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);\n\n    if (urlRecord === null) {\n      return attributeValue;\n    }\n\n    return serializeURL(urlRecord);\n  }\n\n  set action(V) {\n    this.setAttributeNS(null, \"action\", V);\n  } // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n\n\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n\n  reportValidity() {\n    return this.checkValidity();\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n\n  _staticallyValidateConstraints() {\n    const controls = [];\n\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && isSubmittable(el)) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return {\n        result: constraintValidationPositiveResult\n      };\n    }\n\n    const unhandledInvalidControls = [];\n\n    for (const invalidControl of invalidControls) {\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, {\n        cancelable: true\n      });\n\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return {\n      result: constraintValidationNegativeResult,\n      unhandledInvalidControls\n    };\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js"],"names":["DOMException","require","serializeURL","HTMLElementImpl","implementation","domSymbolTree","fireAnEvent","formOwner","isListed","isSubmittable","isSubmitButton","HTMLCollection","notImplemented","parseURLToResultingURLRecord","encTypes","Set","methods","constraintValidationPositiveResult","Symbol","constraintValidationNegativeResult","HTMLFormElementImpl","_descendantAdded","parent","child","form","el","treeIterator","_changedFormOwner","apply","arguments","_descendantRemoved","_getElementNodes","treeToArray","getRootNode","filter","node","_localName","type","elements","createImpl","_globalObject","element","query","length","_doSubmit","isConnected","submit","undefined","bubbles","cancelable","_ownerDocument","_defaultView","requestSubmit","submitter","TypeError","create","_doReset","reset","_formReset","method","getAttributeNS","toLowerCase","has","V","setAttributeNS","enctype","action","attributeValue","URL","urlRecord","checkValidity","_staticallyValidateConstraints","result","reportValidity","controls","push","invalidControls","control","_isCandidateForConstraintValidation","_satisfiesConstraints","unhandledInvalidControls","invalidControl","notCancelled","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\nconst { serializeURL } = require(\"whatwg-url\");\r\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\r\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\r\nconst { fireAnEvent } = require(\"../helpers/events\");\r\nconst { formOwner, isListed, isSubmittable, isSubmitButton } = require(\"../helpers/form-controls\");\r\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\r\nconst notImplemented = require(\"../../browser/not-implemented\");\r\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\r\n\r\nconst encTypes = new Set([\r\n  \"application/x-www-form-urlencoded\",\r\n  \"multipart/form-data\",\r\n  \"text/plain\"\r\n]);\r\n\r\nconst methods = new Set([\r\n  \"get\",\r\n  \"post\",\r\n  \"dialog\"\r\n]);\r\n\r\nconst constraintValidationPositiveResult = Symbol(\"positive\");\r\nconst constraintValidationNegativeResult = Symbol(\"negative\");\r\n\r\nclass HTMLFormElementImpl extends HTMLElementImpl {\r\n  _descendantAdded(parent, child) {\r\n    const form = this;\r\n    for (const el of domSymbolTree.treeIterator(child)) {\r\n      if (typeof el._changedFormOwner === \"function\") {\r\n        el._changedFormOwner(form);\r\n      }\r\n    }\r\n\r\n    super._descendantAdded.apply(this, arguments);\r\n  }\r\n\r\n  _descendantRemoved(parent, child) {\r\n    for (const el of domSymbolTree.treeIterator(child)) {\r\n      if (typeof el._changedFormOwner === \"function\") {\r\n        el._changedFormOwner(null);\r\n      }\r\n    }\r\n\r\n    super._descendantRemoved.apply(this, arguments);\r\n  }\r\n\r\n  _getElementNodes() {\r\n    return domSymbolTree.treeToArray(this.getRootNode({}), {\r\n      filter: node => {\r\n        if (!isListed(node) || (node._localName === \"input\" && node.type === \"image\")) {\r\n          return false;\r\n        }\r\n\r\n        return formOwner(node) === this;\r\n      }\r\n    });\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements\r\n  get elements() {\r\n    // TODO: Return a HTMLFormControlsCollection\r\n    return HTMLCollection.createImpl(this._globalObject, [], {\r\n      element: this.getRootNode({}),\r\n      query: () => this._getElementNodes()\r\n    });\r\n  }\r\n\r\n  get length() {\r\n    return this.elements.length;\r\n  }\r\n\r\n  _doSubmit() {\r\n    if (!this.isConnected) {\r\n      return;\r\n    }\r\n\r\n    this.submit();\r\n  }\r\n\r\n  submit() {\r\n    if (!fireAnEvent(\"submit\", this, undefined, { bubbles: true, cancelable: true })) {\r\n      return;\r\n    }\r\n\r\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\r\n  }\r\n\r\n  requestSubmit(submitter = undefined) {\r\n    if (submitter !== undefined) {\r\n      if (!isSubmitButton(submitter)) {\r\n        throw new TypeError(\"The specified element is not a submit button\");\r\n      }\r\n      if (submitter.form !== this) {\r\n        throw DOMException.create(this._globalObject, [\r\n          \"The specified element is not owned by this form element\",\r\n          \"NotFoundError\"\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (!fireAnEvent(\"submit\", this, undefined, { bubbles: true, cancelable: true })) {\r\n      return;\r\n    }\r\n\r\n    notImplemented(\"HTMLFormElement.prototype.requestSubmit\", this._ownerDocument._defaultView);\r\n  }\r\n\r\n  _doReset() {\r\n    if (!this.isConnected) {\r\n      return;\r\n    }\r\n\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    if (!fireAnEvent(\"reset\", this, undefined, { bubbles: true, cancelable: true })) {\r\n      return;\r\n    }\r\n\r\n    for (const el of this.elements) {\r\n      if (typeof el._formReset === \"function\") {\r\n        el._formReset();\r\n      }\r\n    }\r\n  }\r\n\r\n  get method() {\r\n    let method = this.getAttributeNS(null, \"method\");\r\n    if (method) {\r\n      method = method.toLowerCase();\r\n    }\r\n\r\n    if (methods.has(method)) {\r\n      return method;\r\n    }\r\n    return \"get\";\r\n  }\r\n\r\n  set method(V) {\r\n    this.setAttributeNS(null, \"method\", V);\r\n  }\r\n\r\n  get enctype() {\r\n    let type = this.getAttributeNS(null, \"enctype\");\r\n    if (type) {\r\n      type = type.toLowerCase();\r\n    }\r\n\r\n    if (encTypes.has(type)) {\r\n      return type;\r\n    }\r\n    return \"application/x-www-form-urlencoded\";\r\n  }\r\n\r\n  set enctype(V) {\r\n    this.setAttributeNS(null, \"enctype\", V);\r\n  }\r\n\r\n  get action() {\r\n    const attributeValue = this.getAttributeNS(null, \"action\");\r\n    if (attributeValue === null || attributeValue === \"\") {\r\n      return this._ownerDocument.URL;\r\n    }\r\n    const urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);\r\n    if (urlRecord === null) {\r\n      return attributeValue;\r\n    }\r\n    return serializeURL(urlRecord);\r\n  }\r\n\r\n  set action(V) {\r\n    this.setAttributeNS(null, \"action\", V);\r\n  }\r\n\r\n  // If the checkValidity() method is invoked, the user agent must statically validate the\r\n  // constraints of the form element, and return true if the constraint validation returned\r\n  // a positive result, and false if it returned a negative result.\r\n  checkValidity() {\r\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\r\n  reportValidity() {\r\n    return this.checkValidity();\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\r\n  _staticallyValidateConstraints() {\r\n    const controls = [];\r\n    for (const el of domSymbolTree.treeIterator(this)) {\r\n      if (el.form === this && isSubmittable(el)) {\r\n        controls.push(el);\r\n      }\r\n    }\r\n\r\n    const invalidControls = [];\r\n\r\n    for (const control of controls) {\r\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\r\n        invalidControls.push(control);\r\n      }\r\n    }\r\n\r\n    if (invalidControls.length === 0) {\r\n      return { result: constraintValidationPositiveResult };\r\n    }\r\n\r\n    const unhandledInvalidControls = [];\r\n    for (const invalidControl of invalidControls) {\r\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, { cancelable: true });\r\n      if (notCancelled) {\r\n        unhandledInvalidControls.push(invalidControl);\r\n      }\r\n    }\r\n\r\n    return { result: constraintValidationNegativeResult, unhandledInvalidControls };\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  implementation: HTMLFormElementImpl\r\n};\r\n"]},"metadata":{},"sourceType":"script"}