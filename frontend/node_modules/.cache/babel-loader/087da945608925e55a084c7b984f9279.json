{"ast":null,"code":"\"use strict\";\n/**\r\n * Provides some utility functions for somewhat efficiently modifying a\r\n * collection of headers.\r\n *\r\n * Note that this class only operates on ByteStrings (which is also why we use\r\n * toLowerCase internally).\r\n */\n\nclass HeaderList {\n  constructor() {\n    this.headers = new Map();\n  }\n\n  append(name, value) {\n    const existing = this.headers.get(name.toLowerCase());\n\n    if (existing) {\n      name = existing[0].name;\n      existing.push({\n        name,\n        value\n      });\n    } else {\n      this.headers.set(name.toLowerCase(), [{\n        name,\n        value\n      }]);\n    }\n  }\n\n  contains(name) {\n    return this.headers.has(name.toLowerCase());\n  }\n\n  get(name) {\n    name = name.toLowerCase();\n    const values = this.headers.get(name);\n\n    if (!values) {\n      return null;\n    }\n\n    return values.map(h => h.value).join(\", \");\n  }\n\n  delete(name) {\n    this.headers.delete(name.toLowerCase());\n  }\n\n  set(name, value) {\n    const lowerName = name.toLowerCase();\n    this.headers.delete(lowerName);\n    this.headers.set(lowerName, [{\n      name,\n      value\n    }]);\n  }\n\n  sortAndCombine() {\n    const names = [...this.headers.keys()].sort();\n    return names.map(n => [n, this.get(n)]);\n  }\n\n}\n\nmodule.exports = HeaderList;","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/fetch/header-list.js"],"names":["HeaderList","constructor","headers","Map","append","name","value","existing","get","toLowerCase","push","set","contains","has","values","map","h","join","delete","lowerName","sortAndCombine","names","keys","sort","n","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,UAAMC,QAAQ,GAAG,KAAKL,OAAL,CAAaM,GAAb,CAAiBH,IAAI,CAACI,WAAL,EAAjB,CAAjB;;AACA,QAAIF,QAAJ,EAAc;AACZF,MAAAA,IAAI,GAAGE,QAAQ,CAAC,CAAD,CAAR,CAAYF,IAAnB;AACAE,MAAAA,QAAQ,CAACG,IAAT,CAAc;AAAEL,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAd;AACD,KAHD,MAGO;AACL,WAAKJ,OAAL,CAAaS,GAAb,CAAiBN,IAAI,CAACI,WAAL,EAAjB,EAAqC,CAAC;AAAEJ,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,CAArC;AACD;AACF;;AAEDM,EAAAA,QAAQ,CAACP,IAAD,EAAO;AACb,WAAO,KAAKH,OAAL,CAAaW,GAAb,CAAiBR,IAAI,CAACI,WAAL,EAAjB,CAAP;AACD;;AAEDD,EAAAA,GAAG,CAACH,IAAD,EAAO;AACRA,IAAAA,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;AACA,UAAMK,MAAM,GAAG,KAAKZ,OAAL,CAAaM,GAAb,CAAiBH,IAAjB,CAAf;;AACA,QAAI,CAACS,MAAL,EAAa;AACX,aAAO,IAAP;AACD;;AACD,WAAOA,MAAM,CAACC,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACV,KAAlB,EAAyBW,IAAzB,CAA8B,IAA9B,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACb,IAAD,EAAO;AACX,SAAKH,OAAL,CAAagB,MAAb,CAAoBb,IAAI,CAACI,WAAL,EAApB;AACD;;AAEDE,EAAAA,GAAG,CAACN,IAAD,EAAOC,KAAP,EAAc;AACf,UAAMa,SAAS,GAAGd,IAAI,CAACI,WAAL,EAAlB;AACA,SAAKP,OAAL,CAAagB,MAAb,CAAoBC,SAApB;AACA,SAAKjB,OAAL,CAAaS,GAAb,CAAiBQ,SAAjB,EAA4B,CAAC;AAAEd,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAA5B;AACD;;AAEDc,EAAAA,cAAc,GAAG;AACf,UAAMC,KAAK,GAAG,CAAC,GAAG,KAAKnB,OAAL,CAAaoB,IAAb,EAAJ,EAAyBC,IAAzB,EAAd;AACA,WAAOF,KAAK,CAACN,GAAN,CAAUS,CAAC,IAAI,CAACA,CAAD,EAAI,KAAKhB,GAAL,CAASgB,CAAT,CAAJ,CAAf,CAAP;AACD;;AAzCc;;AA4CjBC,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Provides some utility functions for somewhat efficiently modifying a\r\n * collection of headers.\r\n *\r\n * Note that this class only operates on ByteStrings (which is also why we use\r\n * toLowerCase internally).\r\n */\r\nclass HeaderList {\r\n  constructor() {\r\n    this.headers = new Map();\r\n  }\r\n\r\n  append(name, value) {\r\n    const existing = this.headers.get(name.toLowerCase());\r\n    if (existing) {\r\n      name = existing[0].name;\r\n      existing.push({ name, value });\r\n    } else {\r\n      this.headers.set(name.toLowerCase(), [{ name, value }]);\r\n    }\r\n  }\r\n\r\n  contains(name) {\r\n    return this.headers.has(name.toLowerCase());\r\n  }\r\n\r\n  get(name) {\r\n    name = name.toLowerCase();\r\n    const values = this.headers.get(name);\r\n    if (!values) {\r\n      return null;\r\n    }\r\n    return values.map(h => h.value).join(\", \");\r\n  }\r\n\r\n  delete(name) {\r\n    this.headers.delete(name.toLowerCase());\r\n  }\r\n\r\n  set(name, value) {\r\n    const lowerName = name.toLowerCase();\r\n    this.headers.delete(lowerName);\r\n    this.headers.set(lowerName, [{ name, value }]);\r\n  }\r\n\r\n  sortAndCombine() {\r\n    const names = [...this.headers.keys()].sort();\r\n    return names.map(n => [n, this.get(n)]);\r\n  }\r\n}\r\n\r\nmodule.exports = HeaderList;\r\n"]},"metadata":{},"sourceType":"script"}