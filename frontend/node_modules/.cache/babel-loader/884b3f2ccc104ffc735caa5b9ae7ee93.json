{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\n\nconst reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function appendHandler(el, eventName) {\n  // tryImplForWrapper() is currently required due to use in Window.js\n  idlUtils.tryImplForWrapper(el).addEventListener(eventName, event => {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    const callback = el[\"on\" + eventName];\n\n    if (callback === null) {\n      return;\n    }\n\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    let returnValue = null;\n    const thisValue = idlUtils.tryWrapperForImpl(event.currentTarget); // https://heycam.github.io/webidl/#es-invoking-callback-functions\n\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(thisValue, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        // This will no longer be necessary once EventHandler and Window are implemented in IDL:\n        const eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n\n    if (event.type === \"beforeunload\") {\n      // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n}; // \"Simple\" in this case means \"no content attributes involved\"\n\n\nexports.setupForSimpleEventAccessors = (prototype, events) => {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n\n      exports.appendHandler(this, event);\n    }\n\n    this._eventHandlers[event] = handler;\n  };\n\n  for (const event of events) {\n    exports.createEventAccessor(prototype, event);\n  }\n}; // https://html.spec.whatwg.org/#event-handler-idl-attributes\n\n\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n\n    get() {\n      // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      const value = this._getEventHandlerFor(event);\n\n      if (!value) {\n        return null;\n      }\n\n      if (value.body !== undefined) {\n        let element;\n        let document;\n\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n\n        const {\n          body\n        } = value;\n        const formOwner = element !== null && element.form ? element.form : null;\n        const window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n\n          this._setEventHandlerFor(event, null);\n\n          return null;\n        } // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n\n        let fn;\n        const createFunction = document.defaultView.Function;\n\n        if (event === \"error\" && element === null) {\n          const wrapperBody = document ? body + `\\n//# sourceURL=${document.URL}` : body; // eslint-disable-next-line no-new-func\n\n          fn = createFunction(\"window\", `with (window) { return function onerror(event, source, lineno, colno, error) {\n  ${wrapperBody}\n}; }`)(window);\n        } else {\n          const argNames = [];\n          const args = [];\n          argNames.push(\"window\");\n          args.push(window);\n\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n\n          let wrapperBody = `\nreturn function on${event}(event) {\n  ${body}\n};`;\n\n          for (let i = argNames.length - 1; i >= 0; --i) {\n            wrapperBody = `with (${argNames[i]}) { ${wrapperBody} }`;\n          }\n\n          if (document) {\n            wrapperBody += `\\n//# sourceURL=${document.URL}`;\n          }\n\n          argNames.push(wrapperBody);\n          fn = createFunction(...argNames)(...args);\n        }\n\n        this._setEventHandlerFor(event, fn);\n      }\n\n      return this._getEventHandlerFor(event);\n    },\n\n    set(val) {\n      val = eventHandlerArgCoercion(val);\n\n      this._setEventHandlerFor(event, val);\n    }\n\n  });\n};\n\nfunction typeIsObject(v) {\n  return typeof v === \"object\" && v !== null || typeof v === \"function\";\n} // Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\n\n\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n\n  return val;\n}","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js"],"names":["conversions","require","idlUtils","ErrorEvent","reportException","exports","appendHandler","el","eventName","tryImplForWrapper","addEventListener","event","callback","specialError","isImpl","type","currentTarget","constructor","name","returnValue","thisValue","tryWrapperForImpl","call","message","filename","lineno","colno","error","eventWrapper","wrapperForImpl","undefined","DOMString","_canceledFlag","setupForSimpleEventAccessors","prototype","events","_getEventHandlerFor","_eventHandlers","_setEventHandlerFor","handler","_registeredHandlers","Set","Object","create","has","add","createEventAccessor","obj","defineProperty","configurable","enumerable","get","value","body","element","document","implForWrapper","ownerDocument","formOwner","form","window","_document","defaultView","Function","e","fn","createFunction","wrapperBody","URL","argNames","args","push","i","length","set","val","eventHandlerArgCoercion","typeIsObject","v"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst conversions = require(\"webidl-conversions\");\r\nconst idlUtils = require(\"../generated/utils\");\r\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\r\nconst reportException = require(\"./runtime-script-errors\");\r\n\r\nexports.appendHandler = function appendHandler(el, eventName) {\r\n  // tryImplForWrapper() is currently required due to use in Window.js\r\n  idlUtils.tryImplForWrapper(el).addEventListener(eventName, event => {\r\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\r\n    const callback = el[\"on\" + eventName];\r\n    if (callback === null) {\r\n      return;\r\n    }\r\n\r\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" &&\r\n      event.currentTarget.constructor.name === \"Window\";\r\n\r\n    let returnValue = null;\r\n    const thisValue = idlUtils.tryWrapperForImpl(event.currentTarget);\r\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\r\n    if (typeof callback === \"function\") {\r\n      if (specialError) {\r\n        returnValue = callback.call(\r\n          thisValue, event.message,\r\n          event.filename, event.lineno, event.colno, event.error\r\n        );\r\n      } else {\r\n        // This will no longer be necessary once EventHandler and Window are implemented in IDL:\r\n        const eventWrapper = idlUtils.wrapperForImpl(event);\r\n        returnValue = callback.call(thisValue, eventWrapper);\r\n      }\r\n    }\r\n\r\n    if (event.type === \"beforeunload\") { // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\r\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\r\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\r\n\r\n      if (returnValue !== null) {\r\n        event._canceledFlag = true;\r\n        if (event.returnValue === \"\") {\r\n          event.returnValue = returnValue;\r\n        }\r\n      }\r\n    } else if (specialError) {\r\n      if (returnValue === true) {\r\n        event._canceledFlag = true;\r\n      }\r\n    } else if (returnValue === false) {\r\n      event._canceledFlag = true;\r\n    }\r\n  });\r\n};\r\n\r\n// \"Simple\" in this case means \"no content attributes involved\"\r\nexports.setupForSimpleEventAccessors = (prototype, events) => {\r\n  prototype._getEventHandlerFor = function (event) {\r\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\r\n  };\r\n\r\n  prototype._setEventHandlerFor = function (event, handler) {\r\n    if (!this._registeredHandlers) {\r\n      this._registeredHandlers = new Set();\r\n      this._eventHandlers = Object.create(null);\r\n    }\r\n\r\n    if (!this._registeredHandlers.has(event) && handler !== null) {\r\n      this._registeredHandlers.add(event);\r\n      exports.appendHandler(this, event);\r\n    }\r\n    this._eventHandlers[event] = handler;\r\n  };\r\n\r\n  for (const event of events) {\r\n    exports.createEventAccessor(prototype, event);\r\n  }\r\n};\r\n\r\n// https://html.spec.whatwg.org/#event-handler-idl-attributes\r\nexports.createEventAccessor = function createEventAccessor(obj, event) {\r\n  Object.defineProperty(obj, \"on\" + event, {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() { // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\r\n      const value = this._getEventHandlerFor(event);\r\n      if (!value) {\r\n        return null;\r\n      }\r\n\r\n      if (value.body !== undefined) {\r\n        let element;\r\n        let document;\r\n        if (this.constructor.name === \"Window\") {\r\n          element = null;\r\n          document = idlUtils.implForWrapper(this.document);\r\n        } else {\r\n          element = this;\r\n          document = element.ownerDocument;\r\n        }\r\n        const { body } = value;\r\n\r\n        const formOwner = element !== null && element.form ? element.form : null;\r\n        const window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\r\n\r\n        try {\r\n          // eslint-disable-next-line no-new-func\r\n          Function(body); // properly error out on syntax errors\r\n          // Note: this won't execute body; that would require `Function(body)()`.\r\n        } catch (e) {\r\n          if (window) {\r\n            reportException(window, e);\r\n          }\r\n          this._setEventHandlerFor(event, null);\r\n          return null;\r\n        }\r\n\r\n        // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\r\n\r\n        let fn;\r\n        const createFunction = document.defaultView.Function;\r\n        if (event === \"error\" && element === null) {\r\n          const wrapperBody = document ? body + `\\n//# sourceURL=${document.URL}` : body;\r\n\r\n          // eslint-disable-next-line no-new-func\r\n          fn = createFunction(\"window\", `with (window) { return function onerror(event, source, lineno, colno, error) {\r\n  ${wrapperBody}\r\n}; }`)(window);\r\n        } else {\r\n          const argNames = [];\r\n          const args = [];\r\n\r\n          argNames.push(\"window\");\r\n          args.push(window);\r\n\r\n          if (element !== null) {\r\n            argNames.push(\"document\");\r\n            args.push(idlUtils.wrapperForImpl(document));\r\n          }\r\n          if (formOwner !== null) {\r\n            argNames.push(\"formOwner\");\r\n            args.push(idlUtils.wrapperForImpl(formOwner));\r\n          }\r\n          if (element !== null) {\r\n            argNames.push(\"element\");\r\n            args.push(idlUtils.wrapperForImpl(element));\r\n          }\r\n          let wrapperBody = `\r\nreturn function on${event}(event) {\r\n  ${body}\r\n};`;\r\n          for (let i = argNames.length - 1; i >= 0; --i) {\r\n            wrapperBody = `with (${argNames[i]}) { ${wrapperBody} }`;\r\n          }\r\n          if (document) {\r\n            wrapperBody += `\\n//# sourceURL=${document.URL}`;\r\n          }\r\n          argNames.push(wrapperBody);\r\n          fn = createFunction(...argNames)(...args);\r\n        }\r\n\r\n        this._setEventHandlerFor(event, fn);\r\n      }\r\n      return this._getEventHandlerFor(event);\r\n    },\r\n    set(val) {\r\n      val = eventHandlerArgCoercion(val);\r\n      this._setEventHandlerFor(event, val);\r\n    }\r\n  });\r\n};\r\n\r\nfunction typeIsObject(v) {\r\n  return (typeof v === \"object\" && v !== null) || typeof v === \"function\";\r\n}\r\n\r\n// Implements:\r\n//     [TreatNonObjectAsNull]\r\n//     callback EventHandlerNonNull = any (Event event);\r\n//     typedef EventHandlerNonNull? EventHandler;\r\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\r\n// non-callable callback functions as callback functions that return undefined.\r\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\r\nfunction eventHandlerArgCoercion(val) {\r\n  if (!typeIsObject(val)) {\r\n    return null;\r\n  }\r\n\r\n  return val;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}