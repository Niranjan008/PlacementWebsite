{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSValue: require('./CSSValue').CSSValue\n}; ///CommonJS\n\n/**\r\n * @constructor\r\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\r\n *\r\n */\n\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n  this._token = token;\n  this._idx = idx;\n};\n\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n/**\r\n * parse css expression() value\r\n *\r\n * @return {Object}\r\n *         - error:\r\n *         or\r\n *         - idx:\r\n *         - expression:\r\n *\r\n * Example:\r\n *\r\n * .selector {\r\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\r\n * }\r\n */\n\nCSSOM.CSSValueExpression.prototype.parse = function () {\n  var token = this._token,\n      idx = this._idx;\n  var character = '',\n      expression = '',\n      error = '',\n      info,\n      paren = [];\n\n  for (;; ++idx) {\n    character = token.charAt(idx); // end of token\n\n    if (character === '') {\n      error = 'css expression error: unfinished expression!';\n      break;\n    }\n\n    switch (character) {\n      case '(':\n        paren.push(character);\n        expression += character;\n        break;\n\n      case ')':\n        paren.pop(character);\n        expression += character;\n        break;\n\n      case '/':\n        if (info = this._parseJSComment(token, idx)) {\n          // comment?\n          if (info.error) {\n            error = 'css expression error: unfinished comment in expression!';\n          } else {\n            idx = info.idx; // ignore the comment\n          }\n        } else if (info = this._parseJSRexExp(token, idx)) {\n          // regexp\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          // other\n          expression += character;\n        }\n\n        break;\n\n      case \"'\":\n      case '\"':\n        info = this._parseJSString(token, idx, character);\n\n        if (info) {\n          // string\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          expression += character;\n        }\n\n        break;\n\n      default:\n        expression += character;\n        break;\n    }\n\n    if (error) {\n      break;\n    } // end of expression\n\n\n    if (paren.length === 0) {\n      break;\n    }\n  }\n\n  var ret;\n\n  if (error) {\n    ret = {\n      error: error\n    };\n  } else {\n    ret = {\n      idx: idx,\n      expression: expression\n    };\n  }\n\n  return ret;\n};\n/**\r\n *\r\n * @return {Object|false}\r\n *          - idx:\r\n *          - text:\r\n *          or\r\n *          - error:\r\n *          or\r\n *          false\r\n *\r\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSComment = function (token, idx) {\n  var nextChar = token.charAt(idx + 1),\n      text;\n\n  if (nextChar === '/' || nextChar === '*') {\n    var startIdx = idx,\n        endIdx,\n        commentEndChar;\n\n    if (nextChar === '/') {\n      // line comment\n      commentEndChar = '\\n';\n    } else if (nextChar === '*') {\n      // block comment\n      commentEndChar = '*/';\n    }\n\n    endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n\n    if (endIdx !== -1) {\n      endIdx = endIdx + commentEndChar.length - 1;\n      text = token.substring(idx, endIdx + 1);\n      return {\n        idx: endIdx,\n        text: text\n      };\n    } else {\n      var error = 'css expression error: unfinished comment in expression!';\n      return {\n        error: error\n      };\n    }\n  } else {\n    return false;\n  }\n};\n/**\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t\t- idx:\r\n *\t\t\t\t\t- text:\r\n *\t\t\t\t\tor \r\n *\t\t\t\t\tfalse\r\n *\r\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSString = function (token, idx, sep) {\n  var endIdx = this._findMatchedIdx(token, idx, sep),\n      text;\n\n  if (endIdx === -1) {\n    return false;\n  } else {\n    text = token.substring(idx, endIdx + sep.length);\n    return {\n      idx: endIdx,\n      text: text\n    };\n  }\n};\n/**\r\n * parse regexp in css expression\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t- idx:\r\n *\t\t\t\t- regExp:\r\n *\t\t\t\tor \r\n *\t\t\t\tfalse\r\n */\n\n/*\r\n\r\nall legal RegExp\r\n \r\n/a/\r\n(/a/)\r\n[/a/]\r\n[12, /a/]\r\n\r\n!/a/\r\n\r\n+/a/\r\n-/a/\r\n* /a/\r\n/ /a/\r\n%/a/\r\n\r\n===/a/\r\n!==/a/\r\n==/a/\r\n!=/a/\r\n>/a/\r\n>=/a/\r\n</a/\r\n<=/a/\r\n\r\n&/a/\r\n|/a/\r\n^/a/\r\n~/a/\r\n<</a/\r\n>>/a/\r\n>>>/a/\r\n\r\n&&/a/\r\n||/a/\r\n?/a/\r\n=/a/\r\n,/a/\r\n\r\n\t\tdelete /a/\r\n\t\t\t\tin /a/\r\ninstanceof /a/\r\n\t\t\t\tnew /a/\r\n\t\ttypeof /a/\r\n\t\t\tvoid /a/\r\n\r\n*/\n\n\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function (token, idx) {\n  var before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n      legalRegx = [/^$/, /\\($/, /\\[$/, /\\!$/, /\\+$/, /\\-$/, /\\*$/, /\\/\\s+/, /\\%$/, /\\=$/, /\\>$/, /<$/, /\\&$/, /\\|$/, /\\^$/, /\\~$/, /\\?$/, /\\,$/, /delete$/, /in$/, /instanceof$/, /new$/, /typeof$/, /void$/];\n  var isLegal = legalRegx.some(function (reg) {\n    return reg.test(before);\n  });\n\n  if (!isLegal) {\n    return false;\n  } else {\n    var sep = '/'; // same logic as string\n\n    return this._parseJSString(token, idx, sep);\n  }\n};\n/**\r\n *\r\n * find next sep(same line) index in `token`\r\n *\r\n * @return {Number}\r\n *\r\n */\n\n\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function (token, idx, sep) {\n  var startIdx = idx,\n      endIdx;\n  var NOT_FOUND = -1;\n\n  while (true) {\n    endIdx = token.indexOf(sep, startIdx + 1);\n\n    if (endIdx === -1) {\n      // not found\n      endIdx = NOT_FOUND;\n      break;\n    } else {\n      var text = token.substring(idx + 1, endIdx),\n          matched = text.match(/\\\\+$/);\n\n      if (!matched || matched[0] % 2 === 0) {\n        // not escaped\n        break;\n      } else {\n        startIdx = endIdx;\n      }\n    }\n  } // boundary must be in the same line(js sting or regexp)\n\n\n  var nextNewLineIdx = token.indexOf('\\n', idx + 1);\n\n  if (nextNewLineIdx < endIdx) {\n    endIdx = NOT_FOUND;\n  }\n\n  return endIdx;\n}; //.CommonJS\n\n\nexports.CSSValueExpression = CSSOM.CSSValueExpression; ///CommonJS","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/cssom/lib/CSSValueExpression.js"],"names":["CSSOM","CSSValue","require","CSSValueExpression","token","idx","_token","_idx","prototype","constructor","parse","character","expression","error","info","paren","charAt","push","pop","_parseJSComment","_parseJSRexExp","text","_parseJSString","length","ret","nextChar","startIdx","endIdx","commentEndChar","indexOf","substring","sep","_findMatchedIdx","before","replace","legalRegx","isLegal","some","reg","test","NOT_FOUND","matched","match","nextNewLineIdx","exports"],"mappings":"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","sourcesContent":["//.CommonJS\r\nvar CSSOM = {\r\n\tCSSValue: require('./CSSValue').CSSValue\r\n};\r\n///CommonJS\r\n\r\n\r\n/**\r\n * @constructor\r\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\r\n *\r\n */\r\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\r\n\tthis._token = token;\r\n\tthis._idx = idx;\r\n};\r\n\r\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\r\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\r\n\r\n/**\r\n * parse css expression() value\r\n *\r\n * @return {Object}\r\n *         - error:\r\n *         or\r\n *         - idx:\r\n *         - expression:\r\n *\r\n * Example:\r\n *\r\n * .selector {\r\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\r\n * }\r\n */\r\nCSSOM.CSSValueExpression.prototype.parse = function() {\r\n\tvar token = this._token,\r\n\t\t\tidx = this._idx;\r\n\r\n\tvar character = '',\r\n\t\t\texpression = '',\r\n\t\t\terror = '',\r\n\t\t\tinfo,\r\n\t\t\tparen = [];\r\n\r\n\r\n\tfor (; ; ++idx) {\r\n\t\tcharacter = token.charAt(idx);\r\n\r\n\t\t// end of token\r\n\t\tif (character === '') {\r\n\t\t\terror = 'css expression error: unfinished expression!';\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tswitch(character) {\r\n\t\t\tcase '(':\r\n\t\t\t\tparen.push(character);\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tparen.pop(character);\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase '/':\r\n\t\t\t\tif ((info = this._parseJSComment(token, idx))) { // comment?\r\n\t\t\t\t\tif (info.error) {\r\n\t\t\t\t\t\terror = 'css expression error: unfinished comment in expression!';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\t\t// ignore the comment\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ((info = this._parseJSRexExp(token, idx))) { // regexp\r\n\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\texpression += info.text;\r\n\t\t\t\t} else { // other\r\n\t\t\t\t\texpression += character;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"'\":\r\n\t\t\tcase '\"':\r\n\t\t\t\tinfo = this._parseJSString(token, idx, character);\r\n\t\t\t\tif (info) { // string\r\n\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\texpression += info.text;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpression += character;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (error) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// end of expression\r\n\t\tif (paren.length === 0) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tvar ret;\r\n\tif (error) {\r\n\t\tret = {\r\n\t\t\terror: error\r\n\t\t};\r\n\t} else {\r\n\t\tret = {\r\n\t\t\tidx: idx,\r\n\t\t\texpression: expression\r\n\t\t};\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @return {Object|false}\r\n *          - idx:\r\n *          - text:\r\n *          or\r\n *          - error:\r\n *          or\r\n *          false\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {\r\n\tvar nextChar = token.charAt(idx + 1),\r\n\t\t\ttext;\r\n\r\n\tif (nextChar === '/' || nextChar === '*') {\r\n\t\tvar startIdx = idx,\r\n\t\t\t\tendIdx,\r\n\t\t\t\tcommentEndChar;\r\n\r\n\t\tif (nextChar === '/') { // line comment\r\n\t\t\tcommentEndChar = '\\n';\r\n\t\t} else if (nextChar === '*') { // block comment\r\n\t\t\tcommentEndChar = '*/';\r\n\t\t}\r\n\r\n\t\tendIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\r\n\t\tif (endIdx !== -1) {\r\n\t\t\tendIdx = endIdx + commentEndChar.length - 1;\r\n\t\t\ttext = token.substring(idx, endIdx + 1);\r\n\t\t\treturn {\r\n\t\t\t\tidx: endIdx,\r\n\t\t\t\ttext: text\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tvar error = 'css expression error: unfinished comment in expression!';\r\n\t\t\treturn {\r\n\t\t\t\terror: error\r\n\t\t\t};\r\n\t\t}\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t\t- idx:\r\n *\t\t\t\t\t- text:\r\n *\t\t\t\t\tor \r\n *\t\t\t\t\tfalse\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {\r\n\tvar endIdx = this._findMatchedIdx(token, idx, sep),\r\n\t\t\ttext;\r\n\r\n\tif (endIdx === -1) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\ttext = token.substring(idx, endIdx + sep.length);\r\n\r\n\t\treturn {\r\n\t\t\tidx: endIdx,\r\n\t\t\ttext: text\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * parse regexp in css expression\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t- idx:\r\n *\t\t\t\t- regExp:\r\n *\t\t\t\tor \r\n *\t\t\t\tfalse\r\n */\r\n\r\n/*\r\n\r\nall legal RegExp\r\n \r\n/a/\r\n(/a/)\r\n[/a/]\r\n[12, /a/]\r\n\r\n!/a/\r\n\r\n+/a/\r\n-/a/\r\n* /a/\r\n/ /a/\r\n%/a/\r\n\r\n===/a/\r\n!==/a/\r\n==/a/\r\n!=/a/\r\n>/a/\r\n>=/a/\r\n</a/\r\n<=/a/\r\n\r\n&/a/\r\n|/a/\r\n^/a/\r\n~/a/\r\n<</a/\r\n>>/a/\r\n>>>/a/\r\n\r\n&&/a/\r\n||/a/\r\n?/a/\r\n=/a/\r\n,/a/\r\n\r\n\t\tdelete /a/\r\n\t\t\t\tin /a/\r\ninstanceof /a/\r\n\t\t\t\tnew /a/\r\n\t\ttypeof /a/\r\n\t\t\tvoid /a/\r\n\r\n*/\r\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {\r\n\tvar before = token.substring(0, idx).replace(/\\s+$/, \"\"),\r\n\t\t\tlegalRegx = [\r\n\t\t\t\t/^$/,\r\n\t\t\t\t/\\($/,\r\n\t\t\t\t/\\[$/,\r\n\t\t\t\t/\\!$/,\r\n\t\t\t\t/\\+$/,\r\n\t\t\t\t/\\-$/,\r\n\t\t\t\t/\\*$/,\r\n\t\t\t\t/\\/\\s+/,\r\n\t\t\t\t/\\%$/,\r\n\t\t\t\t/\\=$/,\r\n\t\t\t\t/\\>$/,\r\n\t\t\t\t/<$/,\r\n\t\t\t\t/\\&$/,\r\n\t\t\t\t/\\|$/,\r\n\t\t\t\t/\\^$/,\r\n\t\t\t\t/\\~$/,\r\n\t\t\t\t/\\?$/,\r\n\t\t\t\t/\\,$/,\r\n\t\t\t\t/delete$/,\r\n\t\t\t\t/in$/,\r\n\t\t\t\t/instanceof$/,\r\n\t\t\t\t/new$/,\r\n\t\t\t\t/typeof$/,\r\n\t\t\t\t/void$/\r\n\t\t\t];\r\n\r\n\tvar isLegal = legalRegx.some(function(reg) {\r\n\t\treturn reg.test(before);\r\n\t});\r\n\r\n\tif (!isLegal) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\tvar sep = '/';\r\n\r\n\t\t// same logic as string\r\n\t\treturn this._parseJSString(token, idx, sep);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n *\r\n * find next sep(same line) index in `token`\r\n *\r\n * @return {Number}\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {\r\n\tvar startIdx = idx,\r\n\t\t\tendIdx;\r\n\r\n\tvar NOT_FOUND = -1;\r\n\r\n\twhile(true) {\r\n\t\tendIdx = token.indexOf(sep, startIdx + 1);\r\n\r\n\t\tif (endIdx === -1) { // not found\r\n\t\t\tendIdx = NOT_FOUND;\r\n\t\t\tbreak;\r\n\t\t} else {\r\n\t\t\tvar text = token.substring(idx + 1, endIdx),\r\n\t\t\t\t\tmatched = text.match(/\\\\+$/);\r\n\t\t\tif (!matched || matched[0] % 2 === 0) { // not escaped\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tstartIdx = endIdx;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// boundary must be in the same line(js sting or regexp)\r\n\tvar nextNewLineIdx = token.indexOf('\\n', idx + 1);\r\n\tif (nextNewLineIdx < endIdx) {\r\n\t\tendIdx = NOT_FOUND;\r\n\t}\r\n\r\n\r\n\treturn endIdx;\r\n};\r\n\r\n\r\n\r\n\r\n//.CommonJS\r\nexports.CSSValueExpression = CSSOM.CSSValueExpression;\r\n///CommonJS\r\n"]},"metadata":{},"sourceType":"script"}