{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  parseFloatingPointNumber\n} = require(\"../helpers/strings\");\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  get _minimumValue() {\n    const min = this.getAttributeNS(null, \"min\");\n\n    if (min !== null) {\n      const parsed = parseFloatingPointNumber(min);\n\n      if (parsed !== null) {\n        return parsed;\n      }\n    }\n\n    return 0;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n\n  get _maximumValue() {\n    let candidate = 1.0;\n    const max = this.getAttributeNS(null, \"max\");\n\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n\n  get _actualValue() {\n    let candidate = 0;\n    const value = this.getAttributeNS(null, \"value\");\n\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n    const low = this.getAttributeNS(null, \"low\");\n\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n    const high = this.getAttributeNS(null, \"high\");\n\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n    const optimum = this.getAttributeNS(null, \"optimum\");\n\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttributeNS(null, \"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttributeNS(null, \"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttributeNS(null, \"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttributeNS(null, \"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttributeNS(null, \"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttributeNS(null, \"optimum\", String(val));\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js"],"names":["HTMLElementImpl","require","implementation","parseFloatingPointNumber","getLabelsForLabelable","HTMLMeterElementImpl","constructor","globalObject","args","privateData","_labels","_minimumValue","min","getAttributeNS","parsed","_maximumValue","candidate","max","minimumValue","_actualValue","value","maximumValue","_lowBoundary","low","_highBoundary","high","lowBoundary","_optimumPoint","optimum","labels","val","setAttributeNS","String","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\r\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\r\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\r\n\r\nclass HTMLMeterElementImpl extends HTMLElementImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n    this._labels = null;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\r\n  get _minimumValue() {\r\n    const min = this.getAttributeNS(null, \"min\");\r\n    if (min !== null) {\r\n      const parsed = parseFloatingPointNumber(min);\r\n      if (parsed !== null) {\r\n        return parsed;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\r\n  get _maximumValue() {\r\n    let candidate = 1.0;\r\n\r\n    const max = this.getAttributeNS(null, \"max\");\r\n    if (max !== null) {\r\n      const parsed = parseFloatingPointNumber(max);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const minimumValue = this._minimumValue;\r\n    return candidate >= minimumValue ? candidate : minimumValue;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\r\n  get _actualValue() {\r\n    let candidate = 0;\r\n\r\n    const value = this.getAttributeNS(null, \"value\");\r\n    if (value !== null) {\r\n      const parsed = parseFloatingPointNumber(value);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const minimumValue = this._minimumValue;\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    const maximumValue = this._maximumValue;\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\r\n  get _lowBoundary() {\r\n    const minimumValue = this._minimumValue;\r\n    let candidate = minimumValue;\r\n\r\n    const low = this.getAttributeNS(null, \"low\");\r\n    if (low !== null) {\r\n      const parsed = parseFloatingPointNumber(low);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    const maximumValue = this._maximumValue;\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\r\n  get _highBoundary() {\r\n    const maximumValue = this._maximumValue;\r\n    let candidate = maximumValue;\r\n\r\n    const high = this.getAttributeNS(null, \"high\");\r\n    if (high !== null) {\r\n      const parsed = parseFloatingPointNumber(high);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const lowBoundary = this._lowBoundary;\r\n    if (candidate < lowBoundary) {\r\n      return lowBoundary;\r\n    }\r\n\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\r\n  get _optimumPoint() {\r\n    const minimumValue = this._minimumValue;\r\n    const maximumValue = this._maximumValue;\r\n    let candidate = (minimumValue + maximumValue) / 2;\r\n\r\n    const optimum = this.getAttributeNS(null, \"optimum\");\r\n    if (optimum !== null) {\r\n      const parsed = parseFloatingPointNumber(optimum);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  get labels() {\r\n    return getLabelsForLabelable(this);\r\n  }\r\n\r\n  get value() {\r\n    return this._actualValue;\r\n  }\r\n\r\n  set value(val) {\r\n    this.setAttributeNS(null, \"value\", String(val));\r\n  }\r\n\r\n  get min() {\r\n    return this._minimumValue;\r\n  }\r\n\r\n  set min(val) {\r\n    this.setAttributeNS(null, \"min\", String(val));\r\n  }\r\n\r\n  get max() {\r\n    return this._maximumValue;\r\n  }\r\n\r\n  set max(val) {\r\n    this.setAttributeNS(null, \"max\", String(val));\r\n  }\r\n\r\n  get low() {\r\n    return this._lowBoundary;\r\n  }\r\n\r\n  set low(val) {\r\n    this.setAttributeNS(null, \"low\", String(val));\r\n  }\r\n\r\n  get high() {\r\n    return this._highBoundary;\r\n  }\r\n\r\n  set high(val) {\r\n    this.setAttributeNS(null, \"high\", String(val));\r\n  }\r\n\r\n  get optimum() {\r\n    return this._optimumPoint;\r\n  }\r\n\r\n  set optimum(val) {\r\n    this.setAttributeNS(null, \"optimum\", String(val));\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  implementation: HTMLMeterElementImpl\r\n};\r\n"]},"metadata":{},"sourceType":"script"}