{"ast":null,"code":"\"use strict\"; // https://heycam.github.io/webidl/#idl-named-properties\n\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\nconst TRACKER = Symbol(\"named property tracker\");\n/**\r\n * Create a new NamedPropertiesTracker for the given `object`.\r\n *\r\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\r\n * For example `window.foo` might resolve to an image element with id \"foo\".\r\n *\r\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\r\n *\r\n * @param {Object} object Object used to write properties to\r\n * @param {Object} objectProxy Object used to check if a property is already defined\r\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\r\n *        the property. The function is passed 3 arguments: (object, name, values).\r\n *        `object` is identical to the `object` parameter of this `create` function.\r\n *        `name` is the name of the property.\r\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\r\n *        values is undefined.\r\n *\r\n * @returns {NamedPropertiesTracker}\r\n */\n\nexports.create = function (object, objectProxy, resolverFunc) {\n  if (object[TRACKER]) {\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\n  }\n\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\n  object[TRACKER] = tracker;\n  return tracker;\n};\n\nexports.get = function (object) {\n  if (!object) {\n    return null;\n  }\n\n  return object[TRACKER] || null;\n};\n\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\n  this.object = object;\n  this.objectProxy = objectProxy;\n  this.resolverFunc = resolverFunc;\n  this.trackedValues = new Map(); // Map<Set<value>>\n}\n\nfunction newPropertyDescriptor(tracker, name) {\n  const emptySet = new Set();\n\n  function getValues() {\n    return tracker.trackedValues.get(name) || emptySet;\n  }\n\n  const descriptor = {\n    enumerable: true,\n    configurable: true,\n\n    get() {\n      return tracker.resolverFunc(tracker.object, name, getValues);\n    },\n\n    set(value) {\n      Object.defineProperty(tracker.object, name, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n      });\n    }\n\n  };\n  descriptor.get[IS_NAMED_PROPERTY] = true;\n  descriptor.set[IS_NAMED_PROPERTY] = true;\n  return descriptor;\n}\n/**\r\n * Track a value (e.g. a Node) for a specified name.\r\n *\r\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\r\n * function that was passed to the output may filter the value.\r\n *\r\n * Tracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\n\n\nNamedPropertiesTracker.prototype.track = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  let valueSet = this.trackedValues.get(name);\n\n  if (!valueSet) {\n    valueSet = new Set();\n    this.trackedValues.set(name, valueSet);\n  }\n\n  valueSet.add(value);\n\n  if (name in this.objectProxy) {\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\n    return;\n  }\n\n  const descriptor = newPropertyDescriptor(this, name);\n  Object.defineProperty(this.object, name, descriptor);\n};\n/**\r\n * Stop tracking a previously tracked `name` & `value` pair, see track().\r\n *\r\n * Untracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\n\n\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  const valueSet = this.trackedValues.get(name);\n\n  if (!valueSet) {\n    // the value is not present\n    return;\n  }\n\n  if (!valueSet.delete(value)) {\n    // the value was not present\n    return;\n  }\n\n  if (valueSet.size === 0) {\n    this.trackedValues.delete(name);\n  }\n\n  if (valueSet.size > 0) {\n    // other values for this name are still present\n    return;\n  } // at this point there are no more values, delete the property\n\n\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\n\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\n    // Not defined by NamedPropertyTracker\n    return;\n  } // note: delete puts the object in dictionary mode.\n  // if this turns out to be a performance issue, maybe add:\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\n\n\n  delete this.object[name];\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/named-properties-tracker.js"],"names":["IS_NAMED_PROPERTY","Symbol","TRACKER","exports","create","object","objectProxy","resolverFunc","Error","tracker","NamedPropertiesTracker","get","trackedValues","Map","newPropertyDescriptor","name","emptySet","Set","getValues","descriptor","enumerable","configurable","set","value","Object","defineProperty","writable","prototype","track","undefined","valueSet","add","untrack","delete","size","getOwnPropertyDescriptor"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// https://heycam.github.io/webidl/#idl-named-properties\r\n\r\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\r\nconst TRACKER = Symbol(\"named property tracker\");\r\n\r\n/**\r\n * Create a new NamedPropertiesTracker for the given `object`.\r\n *\r\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\r\n * For example `window.foo` might resolve to an image element with id \"foo\".\r\n *\r\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\r\n *\r\n * @param {Object} object Object used to write properties to\r\n * @param {Object} objectProxy Object used to check if a property is already defined\r\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\r\n *        the property. The function is passed 3 arguments: (object, name, values).\r\n *        `object` is identical to the `object` parameter of this `create` function.\r\n *        `name` is the name of the property.\r\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\r\n *        values is undefined.\r\n *\r\n * @returns {NamedPropertiesTracker}\r\n */\r\nexports.create = function (object, objectProxy, resolverFunc) {\r\n  if (object[TRACKER]) {\r\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\r\n  }\r\n\r\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\r\n  object[TRACKER] = tracker;\r\n  return tracker;\r\n};\r\n\r\nexports.get = function (object) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  return object[TRACKER] || null;\r\n};\r\n\r\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\r\n  this.object = object;\r\n  this.objectProxy = objectProxy;\r\n  this.resolverFunc = resolverFunc;\r\n  this.trackedValues = new Map(); // Map<Set<value>>\r\n}\r\n\r\nfunction newPropertyDescriptor(tracker, name) {\r\n  const emptySet = new Set();\r\n\r\n  function getValues() {\r\n    return tracker.trackedValues.get(name) || emptySet;\r\n  }\r\n\r\n  const descriptor = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return tracker.resolverFunc(tracker.object, name, getValues);\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(tracker.object, name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true,\r\n        value\r\n      });\r\n    }\r\n  };\r\n\r\n  descriptor.get[IS_NAMED_PROPERTY] = true;\r\n  descriptor.set[IS_NAMED_PROPERTY] = true;\r\n  return descriptor;\r\n}\r\n\r\n/**\r\n * Track a value (e.g. a Node) for a specified name.\r\n *\r\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\r\n * function that was passed to the output may filter the value.\r\n *\r\n * Tracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\r\nNamedPropertiesTracker.prototype.track = function (name, value) {\r\n  if (name === undefined || name === null || name === \"\") {\r\n    return;\r\n  }\r\n\r\n  let valueSet = this.trackedValues.get(name);\r\n  if (!valueSet) {\r\n    valueSet = new Set();\r\n    this.trackedValues.set(name, valueSet);\r\n  }\r\n\r\n  valueSet.add(value);\r\n\r\n  if (name in this.objectProxy) {\r\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\r\n    return;\r\n  }\r\n\r\n  const descriptor = newPropertyDescriptor(this, name);\r\n  Object.defineProperty(this.object, name, descriptor);\r\n};\r\n\r\n/**\r\n * Stop tracking a previously tracked `name` & `value` pair, see track().\r\n *\r\n * Untracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\r\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\r\n  if (name === undefined || name === null || name === \"\") {\r\n    return;\r\n  }\r\n\r\n  const valueSet = this.trackedValues.get(name);\r\n  if (!valueSet) {\r\n    // the value is not present\r\n    return;\r\n  }\r\n\r\n  if (!valueSet.delete(value)) {\r\n    // the value was not present\r\n    return;\r\n  }\r\n\r\n  if (valueSet.size === 0) {\r\n    this.trackedValues.delete(name);\r\n  }\r\n\r\n  if (valueSet.size > 0) {\r\n    // other values for this name are still present\r\n    return;\r\n  }\r\n\r\n  // at this point there are no more values, delete the property\r\n\r\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\r\n\r\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\r\n    // Not defined by NamedPropertyTracker\r\n    return;\r\n  }\r\n\r\n  // note: delete puts the object in dictionary mode.\r\n  // if this turns out to be a performance issue, maybe add:\r\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\r\n  delete this.object[name];\r\n};\r\n"]},"metadata":{},"sourceType":"script"}