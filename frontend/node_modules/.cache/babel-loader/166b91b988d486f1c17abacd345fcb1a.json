{"ast":null,"code":"'use strict';\n\nconst TREE = Symbol();\nconst ROOT = Symbol();\nconst NEXT = Symbol();\nconst ITERATE_FUNC = Symbol();\n\nclass TreeIterator {\n  constructor(tree, root, firstResult, iterateFunction) {\n    this[TREE] = tree;\n    this[ROOT] = root;\n    this[NEXT] = firstResult;\n    this[ITERATE_FUNC] = iterateFunction;\n  }\n\n  next() {\n    const tree = this[TREE];\n    const iterateFunc = this[ITERATE_FUNC];\n    const root = this[ROOT];\n\n    if (!this[NEXT]) {\n      return {\n        done: true,\n        value: root\n      };\n    }\n\n    const value = this[NEXT];\n\n    if (iterateFunc === 1) {\n      this[NEXT] = tree._node(value).previousSibling;\n    } else if (iterateFunc === 2) {\n      this[NEXT] = tree._node(value).nextSibling;\n    } else if (iterateFunc === 3) {\n      this[NEXT] = tree._node(value).parent;\n    } else if (iterateFunc === 4) {\n      this[NEXT] = tree.preceding(value, {\n        root: root\n      });\n    } else\n      /* if (iterateFunc === 5)*/\n      {\n        this[NEXT] = tree.following(value, {\n          root: root\n        });\n      }\n\n    return {\n      done: false,\n      value: value\n    };\n  }\n\n}\n\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n  value: function () {\n    return this;\n  },\n  writable: false\n});\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\nmodule.exports = TreeIterator;","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/symbol-tree/lib/TreeIterator.js"],"names":["TREE","Symbol","ROOT","NEXT","ITERATE_FUNC","TreeIterator","constructor","tree","root","firstResult","iterateFunction","next","iterateFunc","done","value","_node","previousSibling","nextSibling","parent","preceding","following","Object","defineProperty","prototype","iterator","writable","PREV","PARENT","PRECEDING","FOLLOWING","freeze","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,MAAM,EAAnB;AACA,MAAMC,IAAI,GAAGD,MAAM,EAAnB;AACA,MAAME,IAAI,GAAGF,MAAM,EAAnB;AACA,MAAMG,YAAY,GAAGH,MAAM,EAA3B;;AAEA,MAAMI,YAAN,CAAmB;AACXC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,WAAb,EAA0BC,eAA1B,EAA2C;AAC9C,SAAKV,IAAL,IAAaO,IAAb;AACA,SAAKL,IAAL,IAAaM,IAAb;AACA,SAAKL,IAAL,IAAaM,WAAb;AACA,SAAKL,YAAL,IAAqBM,eAArB;AACP;;AAEDC,EAAAA,IAAI,GAAG;AACC,UAAMJ,IAAI,GAAG,KAAKP,IAAL,CAAb;AACA,UAAMY,WAAW,GAAG,KAAKR,YAAL,CAApB;AACA,UAAMI,IAAI,GAAG,KAAKN,IAAL,CAAb;;AAEA,QAAI,CAAC,KAAKC,IAAL,CAAL,EAAiB;AACT,aAAO;AACCU,QAAAA,IAAI,EAAE,IADP;AAECC,QAAAA,KAAK,EAAEN;AAFR,OAAP;AAIP;;AAED,UAAMM,KAAK,GAAG,KAAKX,IAAL,CAAd;;AAEA,QAAIS,WAAW,KAAK,CAApB,EAAuB;AACf,WAAKT,IAAL,IAAaI,IAAI,CAACQ,KAAL,CAAWD,KAAX,EAAkBE,eAA/B;AACP,KAFD,MAGK,IAAIJ,WAAW,KAAK,CAApB,EAAuB;AACpB,WAAKT,IAAL,IAAaI,IAAI,CAACQ,KAAL,CAAWD,KAAX,EAAkBG,WAA/B;AACP,KAFI,MAGA,IAAIL,WAAW,KAAK,CAApB,EAAuB;AACpB,WAAKT,IAAL,IAAaI,IAAI,CAACQ,KAAL,CAAWD,KAAX,EAAkBI,MAA/B;AACP,KAFI,MAGA,IAAIN,WAAW,KAAK,CAApB,EAAuB;AACpB,WAAKT,IAAL,IAAaI,IAAI,CAACY,SAAL,CAAeL,KAAf,EAAsB;AAACN,QAAAA,IAAI,EAAEA;AAAP,OAAtB,CAAb;AACP,KAFI;AAGA;AAA4B;AACzB,aAAKL,IAAL,IAAaI,IAAI,CAACa,SAAL,CAAeN,KAAf,EAAsB;AAACN,UAAAA,IAAI,EAAEA;AAAP,SAAtB,CAAb;AACP;;AAED,WAAO;AACCK,MAAAA,IAAI,EAAE,KADP;AAECC,MAAAA,KAAK,EAAEA;AAFR,KAAP;AAIP;;AA1CU;;AA6CnBO,MAAM,CAACC,cAAP,CAAsBjB,YAAY,CAACkB,SAAnC,EAA8CtB,MAAM,CAACuB,QAArD,EAA+D;AACvDV,EAAAA,KAAK,EAAE,YAAW;AACV,WAAO,IAAP;AACP,GAHsD;AAIvDW,EAAAA,QAAQ,EAAE;AAJ6C,CAA/D;AAOApB,YAAY,CAACqB,IAAb,GAAoB,CAApB;AACArB,YAAY,CAACF,IAAb,GAAoB,CAApB;AACAE,YAAY,CAACsB,MAAb,GAAsB,CAAtB;AACAtB,YAAY,CAACuB,SAAb,GAAyB,CAAzB;AACAvB,YAAY,CAACwB,SAAb,GAAyB,CAAzB;AAEAR,MAAM,CAACS,MAAP,CAAczB,YAAd;AACAgB,MAAM,CAACS,MAAP,CAAczB,YAAY,CAACkB,SAA3B;AAEAQ,MAAM,CAACC,OAAP,GAAiB3B,YAAjB","sourcesContent":["'use strict';\r\n\r\nconst TREE = Symbol();\r\nconst ROOT = Symbol();\r\nconst NEXT = Symbol();\r\nconst ITERATE_FUNC = Symbol();\r\n\r\nclass TreeIterator {\r\n        constructor(tree, root, firstResult, iterateFunction) {\r\n                this[TREE] = tree;\r\n                this[ROOT] = root;\r\n                this[NEXT] = firstResult;\r\n                this[ITERATE_FUNC] = iterateFunction;\r\n        }\r\n\r\n        next() {\r\n                const tree = this[TREE];\r\n                const iterateFunc = this[ITERATE_FUNC];\r\n                const root = this[ROOT];\r\n\r\n                if (!this[NEXT]) {\r\n                        return {\r\n                                done: true,\r\n                                value: root,\r\n                        };\r\n                }\r\n\r\n                const value = this[NEXT];\r\n\r\n                if (iterateFunc === 1) {\r\n                        this[NEXT] = tree._node(value).previousSibling;\r\n                }\r\n                else if (iterateFunc === 2) {\r\n                        this[NEXT] = tree._node(value).nextSibling;\r\n                }\r\n                else if (iterateFunc === 3) {\r\n                        this[NEXT] = tree._node(value).parent;\r\n                }\r\n                else if (iterateFunc === 4) {\r\n                        this[NEXT] = tree.preceding(value, {root: root});\r\n                }\r\n                else /* if (iterateFunc === 5)*/ {\r\n                        this[NEXT] = tree.following(value, {root: root});\r\n                }\r\n\r\n                return {\r\n                        done: false,\r\n                        value: value,\r\n                };\r\n        }\r\n}\r\n\r\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\r\n        value: function() {\r\n                return this;\r\n        },\r\n        writable: false,\r\n});\r\n\r\nTreeIterator.PREV = 1;\r\nTreeIterator.NEXT = 2;\r\nTreeIterator.PARENT = 3;\r\nTreeIterator.PRECEDING = 4;\r\nTreeIterator.FOLLOWING = 5;\r\n\r\nObject.freeze(TreeIterator);\r\nObject.freeze(TreeIterator.prototype);\r\n\r\nmodule.exports = TreeIterator;\r\n"]},"metadata":{},"sourceType":"script"}