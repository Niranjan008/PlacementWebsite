{"ast":null,"code":"\"use strict\";\n/**\r\n * Character classes and associated utilities for the 2nd edition of XML 1.1.\r\n *\r\n * @author Louis-Dominique Dubeau\r\n * @license MIT\r\n * @copyright Louis-Dominique Dubeau\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); //\n// Fragments.\n//\n\nexports.CHAR = \"\\u0001-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\";\nexports.RESTRICTED_CHAR = \"\\u0001-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F-\\u0084\\u0086-\\u009F\";\nexports.S = \" \\t\\r\\n\"; // tslint:disable-next-line:max-line-length\n\nexports.NAME_START_CHAR = \":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\uD800\\uDC00-\\uDB7F\\uDFFF\";\nexports.NAME_CHAR = \"-\" + exports.NAME_START_CHAR + \".0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040\"; //\n// Regular expressions.\n//\n\nexports.CHAR_RE = new RegExp(\"^[\" + exports.CHAR + \"]$\", \"u\");\nexports.RESTRICTED_CHAR_RE = new RegExp(\"^[\" + exports.RESTRICTED_CHAR + \"]$\", \"u\");\nexports.S_RE = new RegExp(\"^[\" + exports.S + \"]+$\", \"u\");\nexports.NAME_START_CHAR_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"]$\", \"u\");\nexports.NAME_CHAR_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]$\", \"u\");\nexports.NAME_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"][\" + exports.NAME_CHAR + \"]*$\", \"u\");\nexports.NMTOKEN_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]+$\", \"u\");\nvar TAB = 9;\nvar NL = 0xA;\nvar CR = 0xD;\nvar SPACE = 0x20; //\n// Lists.\n//\n\n/** All characters in the ``S`` production. */\n\nexports.S_LIST = [SPACE, NL, CR, TAB];\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR``.\r\n */\n\nfunction isChar(c) {\n  return c >= 0x0001 && c <= 0xD7FF || c >= 0xE000 && c <= 0xFFFD || c >= 0x10000 && c <= 0x10FFFF;\n}\n\nexports.isChar = isChar;\n/**\r\n * Determines whether a codepoint matches the ``RESTRICTED_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``RESTRICTED_CHAR``.\r\n */\n\nfunction isRestrictedChar(c) {\n  return c >= 0x1 && c <= 0x8 || c === 0xB || c === 0xC || c >= 0xE && c <= 0x1F || c >= 0x7F && c <= 0x84 || c >= 0x86 && c <= 0x9F;\n}\n\nexports.isRestrictedChar = isRestrictedChar;\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production and does not\r\n * match the ``RESTRICTED_CHAR`` production. ``isCharAndNotRestricted(x)`` is\r\n * equivalent to ``isChar(x) && !isRestrictedChar(x)``. This function is faster\r\n * than running the two-call equivalent.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR`` and does not match\r\n * ``RESTRICTED_CHAR``.\r\n */\n\nfunction isCharAndNotRestricted(c) {\n  return c === 0x9 || c === 0xA || c === 0xD || c > 0x1F && c < 0x7F || c === 0x85 || c > 0x9F && c <= 0xD7FF || c >= 0xE000 && c <= 0xFFFD || c >= 0x10000 && c <= 0x10FFFF;\n}\n\nexports.isCharAndNotRestricted = isCharAndNotRestricted;\n/**\r\n * Determines whether a codepoint matches the ``S`` (space) production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``S``.\r\n */\n\nfunction isS(c) {\n  return c === SPACE || c === NL || c === CR || c === TAB;\n}\n\nexports.isS = isS;\n/**\r\n * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.\r\n */\n// tslint:disable-next-line:cyclomatic-complexity\n\nfunction isNameStartChar(c) {\n  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A || c === 0x3A || c === 0x5F || c === 0x200C || c === 0x200D || c >= 0xC0 && c <= 0xD6 || c >= 0xD8 && c <= 0xF6 || c >= 0x00F8 && c <= 0x02FF || c >= 0x0370 && c <= 0x037D || c >= 0x037F && c <= 0x1FFF || c >= 0x2070 && c <= 0x218F || c >= 0x2C00 && c <= 0x2FEF || c >= 0x3001 && c <= 0xD7FF || c >= 0xF900 && c <= 0xFDCF || c >= 0xFDF0 && c <= 0xFFFD || c >= 0x10000 && c <= 0xEFFFF;\n}\n\nexports.isNameStartChar = isNameStartChar;\n/**\r\n * Determines whether a codepoint matches the ``NAME_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_CHAR``.\r\n */\n\nfunction isNameChar(c) {\n  return isNameStartChar(c) || c >= 0x30 && c <= 0x39 || c === 0x2D || c === 0x2E || c === 0xB7 || c >= 0x0300 && c <= 0x036F || c >= 0x203F && c <= 0x2040;\n}\n\nexports.isNameChar = isNameChar;","map":{"version":3,"sources":["../../../../src/xml/1.1/ed2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Character classes and associated utilities for the 2nd edition of XML 1.1.\r\n *\r\n * @author Louis-Dominique Dubeau\r\n * @license MIT\r\n * @copyright Louis-Dominique Dubeau\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//\r\n// Fragments.\r\n//\r\nexports.CHAR = \"\\u0001-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\";\r\nexports.RESTRICTED_CHAR = \"\\u0001-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F-\\u0084\\u0086-\\u009F\";\r\nexports.S = \" \\t\\r\\n\";\r\n// tslint:disable-next-line:max-line-length\r\nexports.NAME_START_CHAR = \":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\uD800\\uDC00-\\uDB7F\\uDFFF\";\r\nexports.NAME_CHAR = \"-\" + exports.NAME_START_CHAR + \".0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040\";\r\n//\r\n// Regular expressions.\r\n//\r\nexports.CHAR_RE = new RegExp(\"^[\" + exports.CHAR + \"]$\", \"u\");\r\nexports.RESTRICTED_CHAR_RE = new RegExp(\"^[\" + exports.RESTRICTED_CHAR + \"]$\", \"u\");\r\nexports.S_RE = new RegExp(\"^[\" + exports.S + \"]+$\", \"u\");\r\nexports.NAME_START_CHAR_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"]$\", \"u\");\r\nexports.NAME_CHAR_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]$\", \"u\");\r\nexports.NAME_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"][\" + exports.NAME_CHAR + \"]*$\", \"u\");\r\nexports.NMTOKEN_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]+$\", \"u\");\r\nvar TAB = 9;\r\nvar NL = 0xA;\r\nvar CR = 0xD;\r\nvar SPACE = 0x20;\r\n//\r\n// Lists.\r\n//\r\n/** All characters in the ``S`` production. */\r\nexports.S_LIST = [SPACE, NL, CR, TAB];\r\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR``.\r\n */\r\nfunction isChar(c) {\r\n    return (c >= 0x0001 && c <= 0xD7FF) ||\r\n        (c >= 0xE000 && c <= 0xFFFD) ||\r\n        (c >= 0x10000 && c <= 0x10FFFF);\r\n}\r\nexports.isChar = isChar;\r\n/**\r\n * Determines whether a codepoint matches the ``RESTRICTED_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``RESTRICTED_CHAR``.\r\n */\r\nfunction isRestrictedChar(c) {\r\n    return (c >= 0x1 && c <= 0x8) ||\r\n        c === 0xB ||\r\n        c === 0xC ||\r\n        (c >= 0xE && c <= 0x1F) ||\r\n        (c >= 0x7F && c <= 0x84) ||\r\n        (c >= 0x86 && c <= 0x9F);\r\n}\r\nexports.isRestrictedChar = isRestrictedChar;\r\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production and does not\r\n * match the ``RESTRICTED_CHAR`` production. ``isCharAndNotRestricted(x)`` is\r\n * equivalent to ``isChar(x) && !isRestrictedChar(x)``. This function is faster\r\n * than running the two-call equivalent.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR`` and does not match\r\n * ``RESTRICTED_CHAR``.\r\n */\r\nfunction isCharAndNotRestricted(c) {\r\n    return (c === 0x9) ||\r\n        (c === 0xA) ||\r\n        (c === 0xD) ||\r\n        (c > 0x1F && c < 0x7F) ||\r\n        (c === 0x85) ||\r\n        (c > 0x9F && c <= 0xD7FF) ||\r\n        (c >= 0xE000 && c <= 0xFFFD) ||\r\n        (c >= 0x10000 && c <= 0x10FFFF);\r\n}\r\nexports.isCharAndNotRestricted = isCharAndNotRestricted;\r\n/**\r\n * Determines whether a codepoint matches the ``S`` (space) production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``S``.\r\n */\r\nfunction isS(c) {\r\n    return c === SPACE || c === NL || c === CR || c === TAB;\r\n}\r\nexports.isS = isS;\r\n/**\r\n * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.\r\n */\r\n// tslint:disable-next-line:cyclomatic-complexity\r\nfunction isNameStartChar(c) {\r\n    return ((c >= 0x41 && c <= 0x5A) ||\r\n        (c >= 0x61 && c <= 0x7A) ||\r\n        c === 0x3A ||\r\n        c === 0x5F ||\r\n        c === 0x200C ||\r\n        c === 0x200D ||\r\n        (c >= 0xC0 && c <= 0xD6) ||\r\n        (c >= 0xD8 && c <= 0xF6) ||\r\n        (c >= 0x00F8 && c <= 0x02FF) ||\r\n        (c >= 0x0370 && c <= 0x037D) ||\r\n        (c >= 0x037F && c <= 0x1FFF) ||\r\n        (c >= 0x2070 && c <= 0x218F) ||\r\n        (c >= 0x2C00 && c <= 0x2FEF) ||\r\n        (c >= 0x3001 && c <= 0xD7FF) ||\r\n        (c >= 0xF900 && c <= 0xFDCF) ||\r\n        (c >= 0xFDF0 && c <= 0xFFFD) ||\r\n        (c >= 0x10000 && c <= 0xEFFFF));\r\n}\r\nexports.isNameStartChar = isNameStartChar;\r\n/**\r\n * Determines whether a codepoint matches the ``NAME_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_CHAR``.\r\n */\r\nfunction isNameChar(c) {\r\n    return isNameStartChar(c) ||\r\n        (c >= 0x30 && c <= 0x39) ||\r\n        c === 0x2D ||\r\n        c === 0x2E ||\r\n        c === 0xB7 ||\r\n        (c >= 0x0300 && c <= 0x036F) ||\r\n        (c >= 0x203F && c <= 0x2040);\r\n}\r\nexports.isNameChar = isNameChar;\r\n//# sourceMappingURL=ed2.js.map"]},"metadata":{},"sourceType":"script"}