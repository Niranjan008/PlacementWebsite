{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\"); // https://html.spec.whatwg.org/#encoding-sniffing-algorithm\n\n\nmodule.exports = (buffer, {\n  transportLayerEncodingLabel,\n  defaultEncoding = \"windows-1252\"\n} = {}) => {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n\n  return encoding;\n}; // https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\n\n\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5]; // !-- (comment start)\n\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2]; // --> (comment end)\n\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // space or >\n\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // >\n\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n} // https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\n\n\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i]; // space or /\n\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    } // \">\"\n\n\n    if (c === 0x3E) {\n      break;\n    }\n\n    let name = \"\";\n    let value = \"\";\n\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i]; // \"=\"\n\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      } // space\n\n\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i]; // space\n\n          if (isSpaceCharacter(c)) {\n            continue;\n          } // not \"=\"\n\n\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name,\n                value\n              },\n              i\n            };\n          }\n\n          i++;\n          break nameLoop;\n        }\n\n        break;\n      } // / or >\n\n\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n\n    c = buffer[i]; // space\n\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i]; // space\n\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    } // \" or '\n\n\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name,\n              value\n            },\n            i\n          };\n        } // A-Z\n\n\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    } // >\n\n\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name,\n          value\n        },\n        i\n      };\n    } // A-Z\n\n\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i]; // space or >\n\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n\n  return {\n    i\n  };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n\n    if (indexOfCharset === -1) {\n      return null;\n    }\n\n    let subPosition = position + indexOfCharset + \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    } // It is an unmatched quotation mark\n\n\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ? string.length : position + indexOfASCIIWhitespaceOrSemicolon + 1;\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js"],"names":["whatwgEncoding","require","module","exports","buffer","transportLayerEncodingLabel","defaultEncoding","encoding","getBOMEncoding","undefined","labelToName","prescanMetaCharset","l","Math","min","length","i","c","c1","c2","c3","c4","c5","cMinus1","cMinus2","isSpaceCharacter","attributeList","Set","gotPragma","needPragma","charset","attrRes","getAttribute","attr","has","name","add","value","extractCharacterEncodingFromMeta","nameLoop","String","fromCharCode","quote","string","position","indexOfCharset","substring","search","subPosition","charCodeAt","nextIndex","indexOf","indexOfASCIIWhitespaceOrSemicolon","end"],"mappings":"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","sourcesContent":["\"use strict\";\r\nconst whatwgEncoding = require(\"whatwg-encoding\");\r\n\r\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\r\nmodule.exports = (buffer, { transportLayerEncodingLabel, defaultEncoding = \"windows-1252\" } = {}) => {\r\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\r\n\r\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\r\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\r\n  }\r\n\r\n  if (encoding === null) {\r\n    encoding = prescanMetaCharset(buffer);\r\n  }\r\n\r\n  if (encoding === null) {\r\n    encoding = defaultEncoding;\r\n  }\r\n\r\n  return encoding;\r\n};\r\n\r\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\r\nfunction prescanMetaCharset(buffer) {\r\n  const l = Math.min(buffer.length, 1024);\r\n  for (let i = 0; i < l; i++) {\r\n    let c = buffer[i];\r\n    if (c === 0x3C) {\r\n      // \"<\"\r\n      const c1 = buffer[i + 1];\r\n      const c2 = buffer[i + 2];\r\n      const c3 = buffer[i + 3];\r\n      const c4 = buffer[i + 4];\r\n      const c5 = buffer[i + 5];\r\n      // !-- (comment start)\r\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\r\n        i += 4;\r\n        for (; i < l; i++) {\r\n          c = buffer[i];\r\n          const cMinus1 = buffer[i - 1];\r\n          const cMinus2 = buffer[i - 2];\r\n          // --> (comment end)\r\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\r\n            break;\r\n          }\r\n        }\r\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\r\n         (c2 === 0x45 || c2 === 0x65) &&\r\n         (c3 === 0x54 || c3 === 0x74) &&\r\n         (c4 === 0x41 || c4 === 0x61) &&\r\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\r\n        // \"meta\" + space or /\r\n        i += 6;\r\n        const attributeList = new Set();\r\n        let gotPragma = false;\r\n        let needPragma = null;\r\n        let charset = null;\r\n\r\n        let attrRes;\r\n        do {\r\n          attrRes = getAttribute(buffer, i, l);\r\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\r\n            attributeList.add(attrRes.attr.name);\r\n            if (attrRes.attr.name === \"http-equiv\") {\r\n              gotPragma = attrRes.attr.value === \"content-type\";\r\n            } else if (attrRes.attr.name === \"content\" && !charset) {\r\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\r\n              if (charset !== null) {\r\n                needPragma = true;\r\n              }\r\n            } else if (attrRes.attr.name === \"charset\") {\r\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\r\n              needPragma = false;\r\n            }\r\n          }\r\n          i = attrRes.i;\r\n        } while (attrRes.attr);\r\n\r\n        if (needPragma === null) {\r\n          continue;\r\n        }\r\n        if (needPragma === true && gotPragma === false) {\r\n          continue;\r\n        }\r\n        if (charset === null) {\r\n          continue;\r\n        }\r\n\r\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\r\n          charset = \"UTF-8\";\r\n        }\r\n        if (charset === \"x-user-defined\") {\r\n          charset = \"windows-1252\";\r\n        }\r\n\r\n        return charset;\r\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\r\n        // a-z or A-Z\r\n        for (i += 2; i < l; i++) {\r\n          c = buffer[i];\r\n          // space or >\r\n          if (isSpaceCharacter(c) || c === 0x3E) {\r\n            break;\r\n          }\r\n        }\r\n        let attrRes;\r\n        do {\r\n          attrRes = getAttribute(buffer, i, l);\r\n          i = attrRes.i;\r\n        } while (attrRes.attr);\r\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\r\n        // ! or / or ?\r\n        for (i += 2; i < l; i++) {\r\n          c = buffer[i];\r\n          // >\r\n          if (c === 0x3E) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\r\nfunction getAttribute(buffer, i, l) {\r\n  for (; i < l; i++) {\r\n    let c = buffer[i];\r\n    // space or /\r\n    if (isSpaceCharacter(c) || c === 0x2F) {\r\n      continue;\r\n    }\r\n    // \">\"\r\n    if (c === 0x3E) {\r\n      break;\r\n    }\r\n    let name = \"\";\r\n    let value = \"\";\r\n    nameLoop:for (; i < l; i++) {\r\n      c = buffer[i];\r\n      // \"=\"\r\n      if (c === 0x3D && name !== \"\") {\r\n        i++;\r\n        break;\r\n      }\r\n      // space\r\n      if (isSpaceCharacter(c)) {\r\n        for (i++; i < l; i++) {\r\n          c = buffer[i];\r\n          // space\r\n          if (isSpaceCharacter(c)) {\r\n            continue;\r\n          }\r\n          // not \"=\"\r\n          if (c !== 0x3D) {\r\n            return { attr: { name, value }, i };\r\n          }\r\n\r\n          i++;\r\n          break nameLoop;\r\n        }\r\n        break;\r\n      }\r\n      // / or >\r\n      if (c === 0x2F || c === 0x3E) {\r\n        return { attr: { name, value }, i };\r\n      }\r\n      // A-Z\r\n      if (c >= 0x41 && c <= 0x5A) {\r\n        name += String.fromCharCode(c + 0x20); // lowercase\r\n      } else {\r\n        name += String.fromCharCode(c);\r\n      }\r\n    }\r\n    c = buffer[i];\r\n    // space\r\n    if (isSpaceCharacter(c)) {\r\n      for (i++; i < l; i++) {\r\n        c = buffer[i];\r\n        // space\r\n        if (isSpaceCharacter(c)) {\r\n          continue;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // \" or '\r\n    if (c === 0x22 || c === 0x27) {\r\n      const quote = c;\r\n      for (i++; i < l; i++) {\r\n        c = buffer[i];\r\n\r\n        if (c === quote) {\r\n          i++;\r\n          return { attr: { name, value }, i };\r\n        }\r\n\r\n        // A-Z\r\n        if (c >= 0x41 && c <= 0x5A) {\r\n          value += String.fromCharCode(c + 0x20); // lowercase\r\n        } else {\r\n          value += String.fromCharCode(c);\r\n        }\r\n      }\r\n    }\r\n\r\n    // >\r\n    if (c === 0x3E) {\r\n      return { attr: { name, value }, i };\r\n    }\r\n\r\n    // A-Z\r\n    if (c >= 0x41 && c <= 0x5A) {\r\n      value += String.fromCharCode(c + 0x20); // lowercase\r\n    } else {\r\n      value += String.fromCharCode(c);\r\n    }\r\n\r\n    for (i++; i < l; i++) {\r\n      c = buffer[i];\r\n\r\n      // space or >\r\n      if (isSpaceCharacter(c) || c === 0x3E) {\r\n        return { attr: { name, value }, i };\r\n      }\r\n\r\n      // A-Z\r\n      if (c >= 0x41 && c <= 0x5A) {\r\n        value += String.fromCharCode(c + 0x20); // lowercase\r\n      } else {\r\n        value += String.fromCharCode(c);\r\n      }\r\n    }\r\n  }\r\n  return { i };\r\n}\r\n\r\nfunction extractCharacterEncodingFromMeta(string) {\r\n  let position = 0;\r\n\r\n  while (true) {\r\n    const indexOfCharset = string.substring(position).search(/charset/i);\r\n\r\n    if (indexOfCharset === -1) {\r\n      return null;\r\n    }\r\n    let subPosition = position + indexOfCharset + \"charset\".length;\r\n\r\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\r\n      ++subPosition;\r\n    }\r\n\r\n    if (string[subPosition] !== \"=\") {\r\n      position = subPosition - 1;\r\n      continue;\r\n    }\r\n\r\n    ++subPosition;\r\n\r\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\r\n      ++subPosition;\r\n    }\r\n\r\n    position = subPosition;\r\n    break;\r\n  }\r\n\r\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\r\n    const nextIndex = string.indexOf(string[position], position + 1);\r\n\r\n    if (nextIndex !== -1) {\r\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\r\n    }\r\n\r\n    // It is an unmatched quotation mark\r\n    return null;\r\n  }\r\n\r\n  if (string.length === position + 1) {\r\n    return null;\r\n  }\r\n\r\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\r\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ?\r\n    string.length :\r\n    position + indexOfASCIIWhitespaceOrSemicolon + 1;\r\n\r\n  return whatwgEncoding.labelToName(string.substring(position, end));\r\n}\r\n\r\nfunction isSpaceCharacter(c) {\r\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}