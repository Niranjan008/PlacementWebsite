{"ast":null,"code":"\"use strict\";\n\nconst {\n  percentDecode\n} = require(\"whatwg-url\");\n\nconst {\n  atob\n} = require(\"abab\");\n\nexports.stripLeadingAndTrailingASCIIWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\nexports.stringPercentDecode = input => {\n  return percentDecode(Buffer.from(input, \"utf-8\"));\n};\n\nexports.isomorphicDecode = input => {\n  return input.toString(\"binary\");\n};\n\nexports.forgivingBase64Decode = data => {\n  const asString = atob(data);\n\n  if (asString === null) {\n    return null;\n  }\n\n  return Buffer.from(asString, \"binary\");\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/data-urls/lib/utils.js"],"names":["percentDecode","require","atob","exports","stripLeadingAndTrailingASCIIWhitespace","string","replace","stringPercentDecode","input","Buffer","from","isomorphicDecode","toString","forgivingBase64Decode","data","asString"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,OAAO,CAAC,MAAD,CAAxB;;AAEAE,OAAO,CAACC,sCAAR,GAAiDC,MAAM,IAAI;AACzD,SAAOA,MAAM,CAACC,OAAP,CAAe,eAAf,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,eAA5C,EAA6D,EAA7D,CAAP;AACD,CAFD;;AAIAH,OAAO,CAACI,mBAAR,GAA8BC,KAAK,IAAI;AACrC,SAAOR,aAAa,CAACS,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmB,OAAnB,CAAD,CAApB;AACD,CAFD;;AAIAL,OAAO,CAACQ,gBAAR,GAA2BH,KAAK,IAAI;AAClC,SAAOA,KAAK,CAACI,QAAN,CAAe,QAAf,CAAP;AACD,CAFD;;AAIAT,OAAO,CAACU,qBAAR,GAAgCC,IAAI,IAAI;AACtC,QAAMC,QAAQ,GAAGb,IAAI,CAACY,IAAD,CAArB;;AACA,MAAIC,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,SAAON,MAAM,CAACC,IAAP,CAAYK,QAAZ,EAAsB,QAAtB,CAAP;AACD,CAND","sourcesContent":["\"use strict\";\r\nconst { percentDecode } = require(\"whatwg-url\");\r\nconst { atob } = require(\"abab\");\r\n\r\nexports.stripLeadingAndTrailingASCIIWhitespace = string => {\r\n  return string.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\r\n};\r\n\r\nexports.stringPercentDecode = input => {\r\n  return percentDecode(Buffer.from(input, \"utf-8\"));\r\n};\r\n\r\nexports.isomorphicDecode = input => {\r\n  return input.toString(\"binary\");\r\n};\r\n\r\nexports.forgivingBase64Decode = data => {\r\n  const asString = atob(data);\r\n  if (asString === null) {\r\n    return null;\r\n  }\r\n  return Buffer.from(asString, \"binary\");\r\n};\r\n"]},"metadata":{},"sourceType":"script"}