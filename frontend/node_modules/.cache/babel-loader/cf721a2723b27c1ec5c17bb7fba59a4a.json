{"ast":null,"code":"\"use strict\";\n\nconst xnv = require(\"xml-name-validator\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  XML_NS,\n  XMLNS_NS\n} = require(\"../helpers/namespaces\"); // https://dom.spec.whatwg.org/#validate\n\n\nexports.name = function (globalObject, name) {\n  const result = xnv.name(name);\n\n  if (!result.success) {\n    throw DOMException.create(globalObject, [\"\\\"\" + name + \"\\\" did not match the Name production: \" + result.error, \"InvalidCharacterError\"]);\n  }\n};\n\nexports.qname = function (globalObject, qname) {\n  exports.name(globalObject, qname);\n  const result = xnv.qname(qname);\n\n  if (!result.success) {\n    throw DOMException.create(globalObject, [\"\\\"\" + qname + \"\\\" did not match the QName production: \" + result.error, \"InvalidCharacterError\"]);\n  }\n};\n\nexports.validateAndExtract = function (globalObject, namespace, qualifiedName) {\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  exports.qname(globalObject, qualifiedName);\n  let prefix = null;\n  let localName = qualifiedName;\n  const colonIndex = qualifiedName.indexOf(\":\");\n\n  if (colonIndex !== -1) {\n    prefix = qualifiedName.substring(0, colonIndex);\n    localName = qualifiedName.substring(colonIndex + 1);\n  }\n\n  if (prefix !== null && namespace === null) {\n    throw DOMException.create(globalObject, [\"A namespace was given but a prefix was also extracted from the qualifiedName\", \"NamespaceError\"]);\n  }\n\n  if (prefix === \"xml\" && namespace !== XML_NS) {\n    throw DOMException.create(globalObject, [\"A prefix of \\\"xml\\\" was given but the namespace was not the XML namespace\", \"NamespaceError\"]);\n  }\n\n  if ((qualifiedName === \"xmlns\" || prefix === \"xmlns\") && namespace !== XMLNS_NS) {\n    throw DOMException.create(globalObject, [\"A prefix or qualifiedName of \\\"xmlns\\\" was given but the namespace was not the XMLNS namespace\", \"NamespaceError\"]);\n  }\n\n  if (namespace === XMLNS_NS && qualifiedName !== \"xmlns\" && prefix !== \"xmlns\") {\n    throw DOMException.create(globalObject, [\"The XMLNS namespace was given but neither the prefix nor qualifiedName was \\\"xmlns\\\"\", \"NamespaceError\"]);\n  }\n\n  return {\n    namespace,\n    prefix,\n    localName\n  };\n};","map":{"version":3,"sources":["R:/Programs/CSEA Placements Website/kindergarten-website-template/placementWebsite/frontend/node_modules/jsdom/lib/jsdom/living/helpers/validate-names.js"],"names":["xnv","require","DOMException","XML_NS","XMLNS_NS","exports","name","globalObject","result","success","create","error","qname","validateAndExtract","namespace","qualifiedName","prefix","localName","colonIndex","indexOf","substring"],"mappings":"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","sourcesContent":["\"use strict\";\r\nconst xnv = require(\"xml-name-validator\");\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\nconst { XML_NS, XMLNS_NS } = require(\"../helpers/namespaces\");\r\n\r\n// https://dom.spec.whatwg.org/#validate\r\n\r\nexports.name = function (globalObject, name) {\r\n  const result = xnv.name(name);\r\n  if (!result.success) {\r\n    throw DOMException.create(globalObject, [\r\n      \"\\\"\" + name + \"\\\" did not match the Name production: \" + result.error,\r\n      \"InvalidCharacterError\"\r\n    ]);\r\n  }\r\n};\r\n\r\nexports.qname = function (globalObject, qname) {\r\n  exports.name(globalObject, qname);\r\n\r\n  const result = xnv.qname(qname);\r\n  if (!result.success) {\r\n    throw DOMException.create(globalObject, [\r\n      \"\\\"\" + qname + \"\\\" did not match the QName production: \" + result.error,\r\n      \"InvalidCharacterError\"\r\n    ]);\r\n  }\r\n};\r\n\r\nexports.validateAndExtract = function (globalObject, namespace, qualifiedName) {\r\n  if (namespace === \"\") {\r\n    namespace = null;\r\n  }\r\n\r\n  exports.qname(globalObject, qualifiedName);\r\n\r\n  let prefix = null;\r\n  let localName = qualifiedName;\r\n\r\n  const colonIndex = qualifiedName.indexOf(\":\");\r\n  if (colonIndex !== -1) {\r\n    prefix = qualifiedName.substring(0, colonIndex);\r\n    localName = qualifiedName.substring(colonIndex + 1);\r\n  }\r\n\r\n  if (prefix !== null && namespace === null) {\r\n    throw DOMException.create(globalObject, [\r\n      \"A namespace was given but a prefix was also extracted from the qualifiedName\",\r\n      \"NamespaceError\"\r\n    ]);\r\n  }\r\n\r\n  if (prefix === \"xml\" && namespace !== XML_NS) {\r\n    throw DOMException.create(globalObject, [\r\n      \"A prefix of \\\"xml\\\" was given but the namespace was not the XML namespace\",\r\n      \"NamespaceError\"\r\n    ]);\r\n  }\r\n\r\n  if ((qualifiedName === \"xmlns\" || prefix === \"xmlns\") && namespace !== XMLNS_NS) {\r\n    throw DOMException.create(globalObject, [\r\n      \"A prefix or qualifiedName of \\\"xmlns\\\" was given but the namespace was not the XMLNS namespace\",\r\n      \"NamespaceError\"\r\n    ]);\r\n  }\r\n\r\n  if (namespace === XMLNS_NS && qualifiedName !== \"xmlns\" && prefix !== \"xmlns\") {\r\n    throw DOMException.create(globalObject, [\r\n      \"The XMLNS namespace was given but neither the prefix nor qualifiedName was \\\"xmlns\\\"\",\r\n      \"NamespaceError\"\r\n    ]);\r\n  }\r\n\r\n  return { namespace, prefix, localName };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}